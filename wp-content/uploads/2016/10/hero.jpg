oolbox_wrapper").hide();
				jQuery("#link_show_toolbox").removeClass("button-selected");
			});
			
			jQuery("#link_show_toolbox").click(function(){
				jQuery("#toolbox_wrapper").show();
				jQuery("#link_show_toolbox").addClass("button-selected");
				
				jQuery("#api_wrapper").hide();
				jQuery("#link_show_api").removeClass("button-selected");
			});

			
			//export slider action
			jQuery("#button_export_slider").click(function(){
				var sliderID = jQuery("#sliderid").val();
				var useDummy = jQuery('input[name="export_dummy_images"]').is(':checked');
				var urlAjaxExport = ajaxurl+"?action="+g_uniteDirPlagin+"_ajax_action&client_action=export_slider&dummy="+useDummy+"&nonce=" + g_revNonce;
				urlAjaxExport += "&sliderid=" + sliderID;
				location.href = urlAjaxExport;
			});
			
			//preview slider actions
			jQuery("#button_preview_slider").click(function(){
				var sliderID = jQuery("#sliderid").val();
				openPreviewSliderDialog(sliderID);
			});
			
			//replace url
			jQuery("#button_replace_url").click(function(){
				if(confirm("Are you sure to replace the urls?") == false)
					return(false);
				
				var data = {
						sliderid: jQuery("#sliderid").val(),
						url_from:jQuery("#replace_url_from").val(),
						url_to:jQuery("#replace_url_to").val()
					};
				
				//some ajax beautifyer
				UniteAdminRev.setAjaxLoaderID("loader_replace_url");
				UniteAdminRev.setAjaxHideButtonID("button_replace_url");
				UniteAdminRev.setSuccessMessageID("replace_url_success");
				
				UniteAdminRev.ajaxRequest("replace_image_urls" ,data);
			});
			
			jQuery('input[name="slider_type"]').each(function(){ if(jQuery(this).is(':checked')) jQuery(this).click(); }); //show grid settings for choosen setting
			
			
			jQuery('#reset_slide_button').click(function(){
				if(confirm("Set selected settings on all Slides of this Slider? (This will be saved immediately)") == false)
					return(false);
					
				var data = {
						sliderid: jQuery("#sliderid").val(),
						reset_transitions:jQuery("#reset_transitions").val(),
						reset_transition_duration:jQuery("#reset_transition_duration").val()
					};
					
				//some ajax beautifyer
				//UniteAdminRev.setAjaxLoaderID("reset_slide_loader");
				UniteAdminRev.setAjaxHideButtonID("reset_slide_button");
				//UniteAdminRev.setSuccessMessageID("reset_slide_success");
				
				UniteAdminRev.ajaxRequest("reset_slide_settings" ,data);
			});
			
			jQuery('#reset_transitions option')[0].checked = true;
			jQuery('#reset_transition_duration').val(0);
			
			
			this.initSpinnerAdmin();
		}
		
		
		/**
		 * init shortcode functionality in the slider new and slider edit views.
		 */
		var initShortcode = function(){
			
			//select shortcode text when click on it.
			jQuery("#shortcode").focus(function(){				
				this.select();
			});
			jQuery("#shortcode").click(function(){				
				this.select();
			});
			
			//update shortcode
			jQuery("#alias").change(function(){
				updateShortcode();
			});

			jQuery("#alias").keyup(function(){
				updateShortcode();
			});
		}
		
		
		/**
		 * update slides order
		 */
		var updateSlidesOrder = function(sliderID){
			var arrSlideHtmlIDs = jQuery( "#list_slides" ).sortable("toArray");
			
			//get slide id's from html (li) id's
			var arrIDs = [];
			var orderCounter = 0;
			jQuery(arrSlideHtmlIDs).each(function(index,value){
				var slideID = value.replace("slidelist_item_","");
				arrIDs.push(slideID);
				
				//update order visually
				orderCounter++;
				jQuery("#slidelist_item_"+slideID+" .order-text").text(orderCounter);
			});
			
			//save order
			var data = {arrIDs:arrIDs,sliderID:sliderID};
			
			jQuery("#saving_indicator").show();
			UniteAdminRev.ajaxRequest("update_slides_order" ,data,function(){
				jQuery("#saving_indicator").hide();
			});
			
			jQuery("#select_sortby").val("menu_order");
		}
		
		
		/**
		 * init "sliders list" view 
		 */
		this.initSlidersListView = function(){
			
			//import slide dialog
			jQuery("#button_import_slider").click(function(){
				
				jQuery("#dialog_import_slider").dialog({
					modal:true,
					resizable:false,
					width:600,
					height:350,
					closeOnEscape:true,
					dialogClass:"tpdialogs",
					buttons:{
					"Close":function(){
						jQuery(this).dialog("close");
					}
				},					
				});	//dialog end
				
			});
			
			jQuery(".button_delete_slider").click(function(){
				
				var sliderID = this.id.replace("button_delete_","");
				var sliderTitle = jQuery("#slider_title_"+sliderID).text(); 
				if(confirm("Do you really want to delete '"+sliderTitle+"' ?") == false)
					return(false);
				
				UniteAdminRev.ajaxRequest("delete_slider" ,{sliderid:sliderID});
			});
			
			//duplicate slider action
			jQuery(".button_duplicate_slider").click(function(){
				var sliderID = this.id.replace("button_duplicate_","");
				UniteAdminRev.ajaxRequest("duplicate_slider" ,{sliderid:sliderID});
			});
		
			//preview slider action
			jQuery(".button_slider_preview").click(function(){
				
				var sliderID = this.id.replace("button_preview_","");
				
				openPreviewSliderDialog(sliderID);
			});
			
			//export slider action on slider overview
			jQuery(".export_slider_overview").click(function(){

				var sliderID = this.id.replace("export_slider_","");
				var useDummy = false;//jQuery('input[name="export_dummy_images"]').is(':checked');
				var urlAjaxExport = ajaxurl+"?action="+g_uniteDirPlagin+"_ajax_action&client_action=export_slider&dummy="+useDummy+"&nonce=" + g_revNonce;
				urlAjaxExport += "&sliderid=" + sliderID;
				location.href = urlAjaxExport;
			});
			
			
			jQuery(".export_slider_standalone").click(function(){
			
				var sliderID = this.id.replace("export_slider_standalone_","");
				
				jQuery("#dialog_preview_sliders").dialog({
					modal:true,
					resizable:true,
					minWidth:1100,
					minHeight:500,
					height:800,
					closeOnEscape:true,
					dialogClass:"tpdialogs",
					buttons:{
						"Close":function(){
							jQuery(this).dialog("close");
						}
					},
					open:function(event,ui){
						var form1 = jQuery("#form_preview")[0];
						jQuery("#preview_sliderid").val(sliderID);
						jQuery("#preview_slider_nonce").val(g_revNonce);
						jQuery("#preview_slider_markup").val('true');
						form1.action = g_urlAjaxActions;
						form1.submit();
					},
					close:function(){
						var form1 = jQuery("#form_preview")[0];
						jQuery("#preview_sliderid").val("empty_output");
						jQuery("#preview_slider_markup").val('false');
						form1.action = g_urlAjaxActions;
						form1.submit();
					}
					
				});	
			});
		}
		
		/**
		 * open preview slider dialog
		 */
		var openPreviewSliderDialog = function(sliderID){
			
			jQuery("#dialog_preview_sliders").dialog({
				modal:true,
				resizable:false,
				minWidth:1100,
				minHeight:500,
				closeOnEscape:true,
				dialogClass:"tpdialogs",
				buttons:{
					"Close":function(){
						jQuery(this).dialog("close");
					}
				},
				open:function(event,ui){
					var form1 = jQuery("#form_preview")[0];
					jQuery("#preview_sliderid").val(sliderID);
					jQuery("#preview_slider_markup").val('false');
					jQuery("#preview_slider_nonce").val(g_revNonce);
					form1.action = g_urlAjaxActions;
					form1.submit();
				},
				close:function(){
					var form1 = jQuery("#form_preview")[0];
					jQuery("#preview_sliderid").val("empty_output");
					jQuery("#preview_slider_markup").val('false');
					form1.action = g_urlAjaxActions;
					form1.submit();
				}
				
			});			
		}
		
		/**
		 * get language array from the language list
		 */
		var getLangsFromLangList = function(objList){
			var arrLangs = [];
			objList.find(".icon_slide_lang").each(function(){
				var lang = jQuery(this).data("lang");
				arrLangs.push(lang);
			});
			
			return(arrLangs);
		}
		
		
		/**
		 * filter langs float menu by the list of icons
		 * show only languages in the float menu that not exists in the icons list
		 * return number of available languages
		 */
		var filterFloatMenuByListIcons = function(objList,operation){
			var arrLangs = getLangsFromLangList(objList);
			var numIcons = 0;
			
			jQuery("#langs_float_wrapper li.item_lang").each(function(){
				var objItem = jQuery(this);
				var lang = objItem.data("lang");
				var found = jQuery.inArray(lang,arrLangs);
				
				if(operation != "add")
					jQuery("#langs_float_wrapper li.operation_sap").hide();
								
				if(jQuery.inArray(lang,arrLangs) == -1){
					numIcons++;
					objItem.show();
					if(operation != "add")
						jQuery("#langs_float_wrapper li.operation_sap").show();
				}
				else
					objItem.hide();
			});
			
			return(numIcons);
		}
		
		
		/**
		 * 
		 * init slides view posts related functions
		 */
		t.initSlidesListViewPosts = function(sliderID){
			
			initSlideListGlobals(sliderID);
			
			//init sortby
			jQuery("#select_sortby").change(function(){
				jQuery("#slides_top_loader").show();
				var data = {};
				data.sliderID = sliderID;
				data.sortby = jQuery(this).val();
				UniteAdminRev.ajaxRequest("update_posts_sortby" ,data,function(){
					jQuery("#slides_top_loader").html("Updated, reloading page...");
					location.reload(true);
				});
			});
			
			// delete single slide
			jQuery(".button_delete_slide").click(function(){
				var postID = jQuery(this).data("slideid");
				var data = {slideID:postID,sliderID:sliderID};
				
				if(confirm(g_messageDeleteSlide) == false)
					return(false);
				
				UniteAdminRev.ajaxRequest("delete_slide" ,data);
			});
			
		}
		
		
		/**
		 * init slide list global functions
		 */
		var initSlideListGlobals = function(sliderID){
			
			//set the slides sortable, init save order
			jQuery("#list_slides").sortable({
					axis:"y",
					handle:'.col-handle',
					update:function(){updateSlidesOrder(sliderID)}
			});
			
			
			//publish / unpublish item
			jQuery("#list_slides .icon_state").click(function(){
				var objIcon = jQuery(this);
				var objLoader = objIcon.siblings(".state_loader");
				var slideID = objIcon.data("slideid");
				var data = {slider_id:sliderID,slide_id:slideID};
				
				objIcon.hide();
				objLoader.show();
				UniteAdminRev.ajaxRequest("toggle_slide_state" ,data,function(response){
					objIcon.show();
					objLoader.hide();
					var currentState = response.state;
					
					if(currentState == "published"){
						objIcon.removeClass("state_unpublished").addClass("state_published").prop("title","Unpublish Slide");
					}else{
						objIcon.removeClass("state_published").addClass("state_unpublished").prop("title","Publish Slide");
					}
					
				});
			});
			
			//change image
			jQuery(".col-image .slide_image").click(function(){
				var slideID = this.id.replace("slide_image_","");
				UniteAdminRev.openAddImageDialog(g_messageChangeImage,function(urlImage,imageID){					
					var data = {slider_id:sliderID,slide_id:slideID,url_image:urlImage,image_id:imageID};
					UniteAdminRev.ajaxRequest("change_slide_image" ,data);
				});
			}).tipsy({
				gravity:"s",
		        delayIn: 70
			});
			
		}
		
		
		/**
		 * init "slides list" view 
		 */
		t.initSlidesListView = function(sliderID){
			
			initSlideListGlobals(sliderID);
			
			//quick lang change by lang icon
			jQuery("#list_slides").delegate(".icon_slide_lang, .icon_slide_lang_add","click",function(event){
				
				event.stopPropagation()
				var pos = UniteAdminRev.getAbsolutePos(this);
				var posLeft = pos[0] - 135;
				var posTop = pos[1] - 60;
				
				var objIcon = jQuery(this);
				
				var operation = objIcon.data("operation");
				var isParent = objIcon.data("isparent");
								
				if(operation == "add")
					jQuery("#langs_float_wrapper .item_operation").hide();
				else{
					jQuery("#langs_float_wrapper .item_operation").show();
					
					if(isParent == true)
						jQuery("#langs_float_wrapper .item_operation.operation_delete").hide();	
				}
								
				var objList = objIcon.parents(".list_slide_icons");
				filterFloatMenuByListIcons(objList,operation);
				
				jQuery("#langs_float_wrapper").show().css({left:posLeft,top:posTop});
				jQuery("#langs_float_wrapper").data("iconid",this.id);
			}); 
			
			jQuery("body").click(function(){
				jQuery("#langs_float_wrapper").hide();
			});
			
			//switch the language
			jQuery("#slides_langs_float li a").click(function(){
				var obj = jQuery(this);
				var lang = obj.data("lang");
				
				var iconID = jQuery("#langs_float_wrapper").data("iconid");
				if(!iconID)
					return(true);
				
				var objIcon = jQuery("#"+iconID);
				var objList = objIcon.parents(".list_slide_icons");
				
				//set operation
				var operation = obj.data("operation");
				
				if(operation == undefined || !operation)
					operation = objIcon.data("operation");
				
				if(operation == undefined || !operation)
					operation = "update";
				
				var currentLang = objIcon.data("lang");
				var slideID = objIcon.data("slideid");
				
				if(currentLang == lang)
					return(true);
				
				//show the loader
				if(operation != "preview"){
					objIcon.siblings(".icon_lang_loader").show();
					objIcon.hide();
				}
				
				if(operation == "edit"){
					var urlSlide = g_patternViewSlide.replace("[slideid]",slideID);
					location.href = urlSlide;
					return(true);
				}
				
				if(operation == "preview"){
					openPreviewSlideDialog(slideID,false);
					return(true);
				}
				
				var data = {sliderid:sliderID,slideid:slideID,lang:lang,operation:operation};
				UniteAdminRev.ajaxRequest("slide_lang_operation" ,data,function(response){
					
					objIcon.siblings(".icon_lang_loader").hide();					
					
					//nandle after response
					switch(response.operation){
						case "update":
							objIcon.attr("src",response.url_icon);
							objIcon.attr("title",response.title);
							objIcon.data("lang",lang);	
							objIcon.show();	
						break;
						case "add":
							objIcon.show();
							objIcon.parent().before(response.html);
							
							//hide the add icon if all langs included
							if(response.isAll == true)
								objList.find(".icon_slide_lang_add").hide();
								
						break;
						case "delete":
							objIcon.parent().remove();
							//show the add icon
							objList.find(".icon_slide_lang_add").show();
							
						break;
					}
					
				});
								
			});
						
			//new slide
			jQuery("#button_new_slide, #button_new_slide_top").click(function(){
				var dialogTitle = jQuery("#button_new_slide").data("dialogtitle");
				
				UniteAdminRev.openAddImageDialog(dialogTitle, function(obj){
					var data = {sliderid:sliderID,obj:obj};
					UniteAdminRev.ajaxRequest("add_slide" ,data);
				},true);	//allow multiple selection
				
			});
			
			//new transparent slide
			jQuery("#button_new_slide_transparent, #button_new_slide_transparent_top").click(function(){
				jQuery(this).hide();
				jQuery(".new_trans_slide_loader").show();
				var data = {sliderid:sliderID};
				UniteAdminRev.ajaxRequest("add_slide" ,data);
			});
			
			//duplicate slide
			jQuery(".button_duplicate_slide").click(function(){
				var slideID = this.id.replace("button_duplicate_slide_","");
				var data = {slideID:slideID,sliderID:sliderID};
				UniteAdminRev.ajaxRequest("duplicate_slide" ,data);
			});
			
			//copy / move slides
			jQuery(".button_copy_slide").click(function(){
				if(jQuery(this).hasClass("button-disabled"))
					return(false);
				
				var dialogCopy = jQuery("#dialog_copy_move");
				
				var textClose = dialogCopy.data("textclose");
				var textUpdate = dialogCopy.data("textupdate");
				var objButton = jQuery(this);
				
				var buttons = {};
				buttons[textUpdate] = function(){
					var slideID = objButton.attr("id").replace("button_copy_slide_","");
					var targetSliderID = jQuery("#selectSliders").val();
					var operation = "copy";
					if(jQuery("#radio_move").prop("checked") == "checked")
						operation = "move";
						
					var data = {slideID:slideID,
								sliderID:sliderID,
								targetSliderID:targetSliderID,
								operation:operation};
					
					var objLoader = objButton.siblings(".loader_copy");
					
					objButton.hide();
					objLoader.show();
					
					UniteAdminRev.ajaxRequest("copy_move_slide" ,data);
					jQuery(this).dialog("close");
				};
				
				jQuery("#dialog_copy_move").dialog({
					modal:true,
					resizable:false,
					width:400,
					height:300,
					closeOnEscape:true,
					dialogClass:"tpdialogs",
					buttons:buttons	
				});	//dialog end
				
			});
			
			// delete single slide
			jQuery(".button_delete_slide").click(function(){
				var slideID = jQuery(this).data("slideid");
				var data = {slideID:slideID,sliderID:sliderID};
				if(confirm("Delete this slide?") == false)
					return(false);
				
				var objButton = jQuery(this);				
				var objLoader = objButton.siblings(".loader_delete");
				
				objButton.hide();
				objLoader.show();
				
				UniteAdminRev.ajaxRequest("delete_slide" ,data);
			});
			
			//preview slide from the slides list:
			jQuery("#list_slides .icon_slide_preview").click(function(){
				var slideID = jQuery(this).data("slideid");
				openPreviewSlideDialog(slideID,false);
			});
			
		}
		
		t.saveEditSlide = function(slideID,isDemo){
			if(!isDemo)
				isDemo = false;
				
			var layers = UniteLayersRev.getLayers();
				
			if(JSON && JSON.stringify)
				layers = JSON.stringify(layers);
			
			var data = {
					slideid:slideID,
					layers:layers
				};

			if(!isDemo){ //demo means static captions. This has 
				data.params = UniteSettingsRev.getSettingsObject("form_slide_params");
				
				data.params.slide_bg_color = jQuery("#slide_bg_color").val();
				data.params.slide_bg_external = jQuery("#slide_bg_external").val();
				data.params.bg_fit = jQuery("#slide_bg_fit").val();
				data.params.bg_fit_x = jQuery("input[name='bg_fit_x']").val();
				data.params.bg_fit_y = jQuery("input[name='bg_fit_y']").val();
				data.params.bg_repeat = jQuery("#slide_bg_repeat").val();
				data.params.bg_position = jQuery("#slide_bg_position").val();
				data.params.bg_position_x = jQuery("input[name='bg_position_x']").val();
				data.params.bg_position_y = jQuery("input[name='bg_position_y']").val();
				data.params.bg_end_position_x = jQuery("input[name='bg_end_position_x']").val();
				data.params.bg_end_position_y = jQuery("input[name='bg_end_position_y']").val();
				
				var slideBgSetting = getSlideBgSettings(); //get new background options
				
				if(typeof slideBgSetting === 'object' && !jQuery.isEmptyObject(slideBgSetting)){ //add new background options
					for(key in slideBgSetting){
						data.params[key] = slideBgSetting[key];
					}
				}
				
				//kenburns & pan zoom
				data.params.kenburn_effect = jQuery("input[name='kenburn_effect']:checked").val();
				//data.params.kb_rotation_start = jQuery("input[name='kb_rotation_start']").val();
				//data.params.kb_rotation_end = jQuery("input[name='kb_rotation_end']").val();
				data.params.kb_start_fit = jQuery("input[name='kb_start_fit']").val();
				data.params.kb_end_fit = jQuery("input[name='kb_end_fit']").val();
				
				data.params.bg_end_position = jQuery("select[name='bg_end_position']").val();
				data.params.kb_duration = jQuery("input[name='kb_duration']").val();
				data.params.kb_easing = jQuery("select[name='kb_easing']").val();
				
			}
			
			if(!isDemo){
				UniteAdminRev.setAjaxHideButtonID("button_save_slide,button_save_slide-tb");
				UniteAdminRev.setAjaxLoaderID("loader_update");
				UniteAdminRev.setSuccessMessageID("update_slide_success");
				UniteAdminRev.ajaxRequest("update_slide", data);
			}else{
				UniteAdminRev.setAjaxHideButtonID("button_save_static_slide,button_save_static_slide-tb");
				UniteAdminRev.setAjaxLoaderID("loader_update");
				UniteAdminRev.setSuccessMessageID("update_slide_success");
				UniteAdminRev.ajaxRequest("update_static_slide", data);
			}
		}
		/**
		 * init "edit slide" view
		 */
		this.initEditSlideView = function(slideID,sliderID){
			
			// TOGGLE SOME ACCORDION
			jQuery('.tp-accordion').click(function() {
				
				var tpacc=jQuery(this);
				if (tpacc.hasClass("tpa-closed")) {
						tpacc.parent().parent().parent().find('.tp-closeifotheropen').each(function() {
							jQuery(this).slideUp(300);
							jQuery(this).parent().find('.tp-accordion').addClass("tpa-closed").addClass("box_closed").find('.postbox-arrow2').html("+");								
						})

						tpacc.parent().find('.toggled-content').slideDown(300);
						tpacc.removeClass("tpa-closed").removeClass("box_closed");
						tpacc.find('.postbox-arrow2').html("-");
				} else {
						tpacc.parent().find('.toggled-content').slideUp(300);
						tpacc.addClass("tpa-closed").addClass("box_closed");
						tpacc.find('.postbox-arrow2').html("+");
				
				}
			})
			
			// MAKE MAX WIDTH OF CONTAINERS.
			jQuery('.mw960').each(function() {
				var newmw = jQuery('#divLayers').width();
				if (newmw<960) newmw=960;
				jQuery(this).css({maxWidth:newmw+"px"});
			})
			
			// SORTING AND DEPTH SELECTOR
			jQuery('#button_sort_depth').on('click',function() {
				jQuery('.layer_sortbox').addClass("depthselected");
				jQuery('.layer_sortbox').removeClass("timeselected");
			});
			
			jQuery('#button_sort_time').on('click',function() {			
				jQuery('.layer_sortbox').removeClass("depthselected");
				jQuery('.layer_sortbox').addClass("timeselected");

			});
			
			
			//add slide top link
			jQuery("#link_add_slide").click(function(){
				
				var data = {
						sliderid:sliderID
					};
				jQuery("#loader_add_slide").show();
				UniteAdminRev.ajaxRequest("add_slide_fromslideview" ,data);
			});
			
			//save slide actions
			jQuery("#button_save_slide").click(function(){
				t.saveEditSlide(slideID);
			});
			
			jQuery("#button_save_slide-tb").click(function(){
				t.saveEditSlide(slideID);
			});
			
			//save slide actions
			jQuery("#button_save_static_slide").click(function(){
				t.saveEditSlide(slideID, true);
			});
			
			jQuery("#button_save_static_slide-tb").click(function(){
				t.saveEditSlide(slideID, true);
			});
			
			//change image actions
			jQuery("#button_change_image").click(function(){
				
				UniteAdminRev.openAddImageDialog("Select Slide Image",function(urlImage,imageID){
						if(imageID == undefined)
							imageID = "";
						
						//set visual image 
						jQuery("#divbgholder").css("background-image","url("+urlImage+")");
						
						//update setting input
						jQuery("#image_url").val(urlImage);
						jQuery("#image_id").val(imageID);
						
						jQuery("#radio_back_image").attr('checked', 'checked');
						jQuery("#radio_back_image").click();
						
						if(jQuery('input[name="kenburn_effect"]:checked').val() == 'on'){
							jQuery('input[name="kb_start_fit"]').change();
						}
					}); //dialog
			});	//change image click.
			
			
			// slide options hide / show			
			jQuery("#link_hide_options").click(function(){
				
				if(jQuery("#slide_params_holder").is(":visible") == true){
					jQuery("#slide_params_holder").hide("slow");
					jQuery(this).text("Show Slide Options").addClass("link-selected");
				}else{
					jQuery("#slide_params_holder").show("slow");
					jQuery(this).text("Hide Slide Options").removeClass("link-selected");
				}
				
			});
			
			
			//preview slide actions - open preveiw dialog			
			jQuery("#button_preview_slide").click(function(){				
				openPreviewSlideDialog(slideID,true);
			});
			//preview slide actions - open preveiw dialog			
			jQuery("#button_preview_slide-tb").click(function(){				
				openPreviewSlideDialog(slideID,true);
			});
			
			//init background options
			jQuery("#radio_back_image, #radio_back_trans, #radio_back_solid, #radio_back_external").click(function(){
				var currentType = jQuery("#background_type").val();
				var bgType = jQuery(this).data("bgtype");
				
				if(currentType == bgType)
					return(true);
				
				//disable image button
				if(bgType == "image")
					jQuery("#button_change_image").removeClass("button-disabled");
				else
					jQuery("#button_change_external").addClass("button-disabled");
				
				if(bgType == "solid")
					jQuery("#slide_bg_color").removeClass("disabled").prop("disabled","");
				else
					jQuery("#slide_bg_color").addClass("disabled").prop("disabled","disabled");
				
				if(bgType == "external"){
					jQuery("#slide_bg_external").removeClass("disabled").prop("disabled","");
					jQuery("#button_change_image").removeClass("button-disabled");
				}else{
					jQuery("#slide_bg_external").addClass("disabled").prop("disabled","disabled");
					jQuery("#button_change_external").addClass("button-disabled");
				}
				
				
				jQuery("#background_type").val(bgType);
				
				setSlideBGByType(bgType);
								
			});
			
			jQuery("#button_change_external").click(function(){
				var bgType = jQuery("#radio_back_external:checked").data("bgtype");
				
				if(bgType == "external"){
					jQuery("#slide_bg_external").removeClass("disabled").prop("disabled","");
					jQuery("#button_change_image").removeClass("button-disabled");
					setSlideBGByType(bgType);
					
					
					if(jQuery('input[name="kenburn_effect"]:checked').val() == 'on'){
						jQuery('input[name="kb_start_fit"]').change();
					}
				}
			});
			
			
			//on change bg color event 
			UniteAdminRev.setColorPickerCallback(function(){
				var bgType = jQuery("#background_type").val();
				if(bgType == "solid"){
					var bgColor = jQuery("#slide_bg_color").val();
					jQuery("#divbgholder").css("background-color",bgColor);
				}
					
			});
			
			
			//on change title event
			jQuery("#title").on('input',function(e){
				jQuery(".slide_title").text(jQuery("#title").val());
			});
			
			jQuery(".list_slide_links").sortable({
				update:function(){updateSlidesOrderEdit(sliderID)}
			});
			
			
			/**
			 * update slides order in slide edit
			 */
			var updateSlidesOrderEdit = function(sliderID){
				var arrSlideHtmlIDs = jQuery( ".list_slide_links" ).sortable("toArray");
				
				//get slide id's from html (li) id's
				var arrIDs = [];
				jQuery(arrSlideHtmlIDs).each(function(index,value){
					var slideID = value.replace("slidelist_item_","");
					arrIDs.push(slideID);
				});
				
				//save order
				var data = {arrIDs:arrIDs,sliderID:sliderID};
				
				jQuery("#loader_add_slide").show();
				UniteAdminRev.ajaxRequest("update_slides_order" ,data,function(){
					jQuery("#loader_add_slide").hide();
				});
				
			}
			
			jQuery('.inputDatePicker').datepicker({
				dateFormat : 'dd-mm-yy 00:00'
			});
			
			
			// delete single slide
			jQuery("#button_delete_slide").click(function(){
				var data = {slideID:slideID,sliderID:sliderID};
				
				if(confirm(g_messageDeleteSlide) == false)
					return(false);
				
				UniteAdminRev.ajaxRequest("delete_slide" ,data);
			});
			
			if(jQuery('input[name="load_googlefont"]:checked').val() == 'false'){
				jQuery('#load_googlefont_row').siblings('.spanSettingsStaticText').remove();
				jQuery('#load_googlefont_row').parent().html('<div class="setting_info_small" style="margin-bottom: 5px;">Please use the Punch Fonts Menu to add Fonts</div>');
				
				jQuery('#load_googlefont_row').remove();
				jQuery('#google_font_row').remove();
				jQuery('#load_googlefont').closest('.postbox.unite-postbox').hide();
				
			}
		}//init slide view
		
		
		/**
		 * open preview slide dialog
		 */
		var openPreviewSlideDialog = function(slideID,useParams){

			if(useParams === undefined)
				useParams = true;
			
			var iframePreview = jQuery("#frame_preview");
			var previewWidth = iframePreview.width() + 10;
			var previewHeight = iframePreview.height() + 10;
			var iframe = jQuery("#frame_preview");
			
			jQuery("#dialog_preview").dialog({
					modal:true,
					resizable:false,
					minWidth:previewWidth,
					minHeight:previewHeight,
					closeOnEscape:true,
					dialogClass:"tpdialogs",
					buttons:{
						"Close":function(){
							jQuery(this).dialog("close");
						}
					},
					open:function(event,ui){						
						var form1 = jQuery("#form_preview_slide")[0];
						jQuery("#preview_slide_nonce").val(g_revNonce);
						
						var objData = {
								slideid:slideID,
							};
						
						if(useParams == true){
							objData.params = UniteSettingsRev.getSettingsObject("form_slide_params"),
							objData.params.slide_bg_color = jQuery("#slide_bg_color").val();
							objData.params.slide_bg_external = jQuery("#slide_bg_external").val();
							objData.params.bg_fit = jQuery("#slide_bg_fit").val();
							objData.params.bg_fit_x = jQuery("input[name='bg_fit_x']").val();
							objData.params.bg_fit_y = jQuery("input[name='bg_fit_y']").val();
							objData.params.bg_repeat = jQuery("#slide_bg_repeat").val();
							objData.params.bg_position = jQuery("#slide_bg_position").val();
							objData.params.bg_position_x = jQuery("input[name='bg_position_x']").val();
							objData.params.bg_position_y = jQuery("input[name='bg_position_y']").val();
							objData.params.bg_end_position_x = jQuery("input[name='bg_end_position_x']").val();
							objData.params.bg_end_position_y = jQuery("input[name='bg_end_position_y']").val();
							
							//kenburns & pan zoom
							objData.params.kenburn_effect = jQuery("input[name='kenburn_effect']:checked").val();
							//objData.params.kb_rotation_start = jQuery("input[name='kb_rotation_start']").val();
							//objData.params.kb_rotation_end = jQuery("input[name='kb_rotation_end']").val();
							objData.params.kb_start_fit = jQuery("input[name='kb_start_fit']").val();
							objData.params.kb_end_fit = jQuery("input[name='kb_end_fit']").val();
							
							objData.params.bg_end_position = jQuery("select[name='bg_end_position']").val();
							objData.params.kb_duration = jQuery("input[name='kb_duration']").val();
							objData.params.kb_easing = jQuery("select[name='kb_easing']").val();
							
							objData.layers = UniteLayersRev.getLayers()
						}
						
						var jsonData = JSON.stringify(objData);
						
						jQuery("#preview_slide_data").val(jsonData);
						form1.action = g_urlAjaxActions;
						form1.client_action = "preview_slide";
						form1.submit();
					},
					close:function(){	//destroy the loaded preview
						var form1 = jQuery("#form_preview_slide")[0];
						form1.action = g_urlAjaxActions;
						jQuery("#preview_slide_data").val("empty_output");
						form1.submit();
					}
			});
			
		}
		
		
		/**
		 * set slide background by type (image, solid, bg).
		 */
		var setSlideBGByType = function(bgType){
			switch(bgType){
				case "image":
					var urlImage = jQuery("#image_url").val();
					jQuery("#divbgholder").css("background-image","url('"+urlImage+"')");
					jQuery("#divbgholder").css("background-color","transparent");
					jQuery("#divbgholder").removeClass("trans_bg");
					if(jQuery('input[name="kenburn_effect"]:checked').val() == 'on'){
						jQuery('input[name="kb_start_fit"]').change();
					}
				break;			
				case "trans":
					jQuery("#divbgholder").css("background-image","none");
					jQuery("#divbgholder").css("background-color","transparent");
					jQuery("#divbgholder").addClass("trans_bg");
				break;
				case "solid":
					jQuery("#divbgholder").css("background-image","none");
					jQuery("#divbgholder").removeClass("trans_bg");
					var bgColor = jQuery("#slide_bg_color").val();
					jQuery("#divbgholder").css("background-color",bgColor);
				break;
				case "external":
					var urlImage = jQuery("#slide_bg_external").val();
					jQuery("#divbgholder").css("background-image","url('"+urlImage+"')");
					jQuery("#divbgholder").css("background-color","transparent");
					jQuery("#divbgholder").removeClass("trans_bg");
					if(jQuery('input[name="kenburn_effect"]:checked').val() == 'on'){
						jQuery('input[name="kb_start_fit"]').change();
					}
				break;
			}

		}
		
		var getSlideBgSettings = function(){
			var retParams = new Object;
			
			retParams['bg_fit'] = jQuery('#slide_bg_fit').val();
			if(retParams['bg_fit'] == 'percentage'){
				retParams['bg_fit_x'] = jQuery('input[name="bg_fit_x"]').val();
				retParams['bg_fit_y'] = jQuery('input[name="bg_fit_y"]').val();
			}
			
			retParams['bg_position'] = jQuery('#slide_bg_position').val();
			if(retParams['bg_position'] == 'percentage'){
				retParams['bg_position_x'] = jQuery('input[name="bg_position_x"]').val();
				retParams['bg_position_y'] = jQuery('input[name="bg_position_y"]').val();
			}
			
			retParams['bg_end_position'] = jQuery('#slide_bg_end_position').val();
			if(retParams['bg_end_position'] == 'percentage'){
				retParams['bg_end_position_x'] = jQuery('input[name="bg_end_position_x"]').val();
				retParams['bg_end_position_y'] = jQuery('input[name="bg_end_position_y"]').val();
			}
			
			retParams['bg_repeat'] = jQuery('#slide_bg_repeat').val();
			
			return retParams;
		}
		
		
		/**
		 * global style part
		 */
		 
		var g_codemirrorCssDynamic = null;
		var g_codemirrorCssStatic = null;
		var staticStyles = null;
		var urlStaticCssCaptions = null;
		
		/**
		 * set static captions url for refreshing when needed
		 */
		t.setStaticCssCaptionsUrl = function(url){
			urlStaticCssCaptions = url;
		}
		
		/**
		 * get static captions url for refreshing when needed
		 */
		t.getUrlStaticCssCaptions = function(){
			return urlStaticCssCaptions;
		}
		
		t.initGlobalStyles = function(){
			initGlobalCssAccordion();
			initGlobalCssEditor();
		}
		
		t.setCodeMirrorStaticEditor = function(){
			g_codemirrorCssStatic = CodeMirror.fromTextArea(document.getElementById("textarea_edit_static"), { lineNumbers: true });
		}
		
		t.setCodeMirrorDynamicEditor = function(){
			g_codemirrorCssDynamic = CodeMirror.fromTextArea(document.getElementById("textarea_show_dynamic_styles"), {
				lineNumbers: true,
				readOnly: true
			});
		}
		
		var initGlobalCssAccordion = function(){
			jQuery("#css-static-accordion").accordion({
				heightStyle: "content",
				activate: function(event, ui){
					if(g_codemirrorCssStatic != null) g_codemirrorCssStatic.refresh();
					if(g_codemirrorCssDynamic != null) g_codemirrorCssDynamic.refresh();
				}
			});
		}
		
		var initGlobalCssEditor = function(){
		
			jQuery('#button_edit_css_global').click(function(){
				//if(!UniteLayersRev.getLayerGeneralParamsStatus()) return false; //false if fields are disabled
				
				jQuery("#css-static-accordion").accordion({ active: 1 });
				
				UniteAdminRev.ajaxRequest("get_static_css","",function(response){
					var cssData = response.data;
					
					if(g_codemirrorCssStatic != null)
						g_codemirrorCssStatic.setValue(cssData);
					else{
						jQuery("#textarea_edit_static").val(cssData);
						setTimeout('RevSliderAdmin.setCodeMirrorStaticEditor()',500);
					}
				});
				
				UniteAdminRev.ajaxRequest("get_dynamic_css","",function(response){
					var cssData = response.data;
					
					if(g_codemirrorCssDynamic != null)
						g_codemirrorCssDynamic.setValue(cssData);
					else{
						jQuery("#textarea_show_dynamic_styles").val(cssData);
						setTimeout('RevSliderAdmin.setCodeMirrorDynamicEditor()',500);
					}
				});
				
				jQuery("#css_static_editor_wrap").dialog({
					modal:true,
					resizable:false,
					title:'Global Styles Editor',
					minWidth:700,
					minHeight:500,
					closeOnEscape:true,
					open:function () {
						jQuery(this).closest(".ui-dialog")
						.find(".ui-button").each(function(i) {
						   var cl;
						   if (i==0) cl="revgray";
						   if (i==1) cl="revgreen";
						   if (i==2) cl="revred";
						   jQuery(this).addClass(cl).addClass("button-primary").addClass("rev-uibuttons");						   						   
					   })
					},
					buttons:{
						Save:function(){
							if(!confirm("Really update global styles?")){
								return false;
							}
							
							UniteAdminRev.setErrorMessageID("dialog_error_message");						
							var data;
							if(g_codemirrorCssStatic != null)
								data = g_codemirrorCssStatic.getValue();
							else
								data = jQuery("#textarea_edit_static").val();
							
							UniteAdminRev.ajaxRequest("update_static_css",data,function(response){
								jQuery("#dialog_success_message").show().html(response.message);
								
								if(g_codemirrorCssStatic != null)
									g_codemirrorCssStatic.setValue(response.css);
								else
									jQuery("#textarea_edit_static").val(css);
								
							});
							
							//if(urlStaticCssCaptions)
							//	setTimeout('UniteAdminRev.loadCssFile(RevSliderAdmin.getUrlStaticCssCaptions(),"rs-plugin-static-css");',1000);
								
							jQuery(this).dialog("close");
						},
						"Cancel":function(){
							jQuery(this).dialog("close");
						}
					}
				});
			});
		}
		
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  //ver 1.0

var UniteCssEditorRev = new function(){
	
	var t = this;
	var initCssStyles = [];
	var cssPreClass = '.tp-caption';
	var cssCurrentEdit = '';
	var cssCurrentType = 'params';
	var curActiveStyles = new Object;
	var curFullClass = new Object;
	var cssExpertEditor = false;
	var urlCssCaptions = null;
	var isHoverActive = false;
	var showExpertWarning = false;
	var g_codemirrorCssExpert = null;
	
	//======================================================
	//	Init Functions
	//======================================================
	
	/**
	 * set init css styles array
	 */
	t.setInitCssStyles = function(jsonClasses){
		initCssStyles = jQuery.parseJSON(jsonClasses);
	}
	
	/**
	 * set captions url for refreshing when needed
	 */
	t.setCssCaptionsUrl = function(url){
		urlCssCaptions = url;
	}
	
	/**
	 * init the css editor
	 */
	t.init = function(){
		initAccordion();
		initEditorElements();
		initEditorDialog();
	}
	
	/**
	 * init dialog actions
	 */
	var initEditorDialog = function(){

		jQuery("#button_edit_css").click(function(){
			if(!UniteLayersRev.getLayerGeneralParamsStatus()) return false; //false if fields are disabled
			if(jQuery.trim(jQuery('#layer_caption').val()).length == 0) return false; //check if classname is empty
			
			jQuery("#css_preview").attr('style', ''); //clear the preview
			
			jQuery("#css_editor_wrap").dialog({
				modal:true,
				resizable:false,
				title:'Currently editing: '+jQuery('#layer_caption').val(),
				minWidth:700,
				minHeight:500,
				closeOnEscape:true,
				open:function () {
					jQuery(this).closest(".ui-dialog")
						.find(".ui-button").each(function(i) {
						   var cl;
						   if (i==0) cl="revgray";
						   if (i==1) cl="revgreen";
						   if (i==2) cl="revred";
						   if (i==3) cl="revred";
						   jQuery(this).addClass(cl).addClass("button-primary").addClass("rev-uibuttons");						   						   
				   })
				},
				buttons:{
					"Save/Change":function(){
						UniteAdminRev.setErrorMessageID("dialog_error_message");						
						var data;
						jQuery('#current-class-handle').text(cssCurrentEdit);
						jQuery('input[name="css_save_as"]').val(cssCurrentEdit);
						
						//curActiveStyles update
						setActiveStylesFromExample();
						updateCurFullClass();
						
						jQuery("#dialog-change-css").dialog({
							modal: true,
							buttons: {
								'Save as': function() {
									jQuery("#dialog-change-css-save-as").dialog({
										modal: true,
										buttons: {
											'Save as new': function(){
												var update_name = UniteAdminRev.sanitize_input(jQuery('input[name="css_save_as"]').val());
												if(update_name != ''){
													var id = checkIfHandleExists(update_name);
													var update = true;
													if(id !== false){
														update = false;
														if(confirm("Class already exists, overwrite?")){
															updateStylesInDb(update_name, id);
															update = true;
														}
													}else{
														updateStylesInDb(update_name, false);
														jQuery('#layer_caption').val(update_name);
														UniteLayersRev.updateLayerFromFields();
													}
												
													if(update){
														jQuery("#dialog-change-css").dialog("close");
														jQuery(this).dialog("close");
														jQuery("#css_editor_wrap").dialog("close");
													}
												}else{
													alert('Class must be a valid CSS class name');
												}
											}
										}
									});
								},
								Save: function() {
									var update_name = UniteAdminRev.sanitize_input(jQuery('input[name="layer_caption"]').val());
									var id = checkIfHandleExists(update_name);
									if(update_name != ''){
										if(id !== false){
											if(confirm("Really overwrite Class?")){
												updateStylesInDb(update_name, id);
												jQuery(this).dialog("close");
												jQuery("#css_editor_wrap").dialog("close");
											}
										}else{
											updateStylesInDb(update_name, false);
											UniteLayersRev.updateLayerFromFields();
											jQuery(this).dialog("close");
											jQuery("#css_editor_wrap").dialog("close");
										}
									}else{
										alert('Class must be a valid CSS class name');
									}
								}
							}
						});
					},
					"Cancel":function(){
						jQuery(this).dialog("close");
					},
					"Delete":function(){
						if(confirm("Really delete Class '"+jQuery('#layer_caption').val()+"'? This can't be undone!")){
							var id = checkIfHandleExists(jQuery('#layer_caption').val());
							if(id !== false){
								deleteStylesInDb(jQuery('#layer_caption').val(), id);
							}else{
								alert("This class does not exist.");
							}
							
							jQuery(this).dialog("close");
							jQuery("#css_editor_wrap").dialog("close");
						}
					}
				}
			});
			
			jQuery("#reset-background-color").click(function(){
				jQuery('input[name="css_background-color"]').val('transparent');
				jQuery('input[name="css_background-color"]').css('background-color', '');
				jQuery('input[name="css_background-color"]').css('color', '#000');
				t.setCssPreviewLive();
			});
			
			jQuery("#reset-border-color").click(function(){
				jQuery('input[name="css_border-color-show"]').css('background-color', '');
				jQuery('input[name="css_border-color-show"]').css('color', '#000');
				jQuery('input[name="css_border-color-show"]').val(' ');
				jQuery('input[name="css_border-color"]').val(' ');
				t.setCssPreviewLive();
			});
			
			resetTabsToIdle(); //reset tabs to idle
			setFullClass(); //fill the object for editing
			setActiveStyles(cssCurrentType); //we start with params
			
			resetNoviceFields(); //reset the novice fields
			setNoviceFields(); //set novice fields from cssActiveStyles
			
			setCssPreview(); //fill the preview with styles
			resetSubSlider(); //reset padding and corner sliders
			
			setHoverActive(); //check if cssFullClass has hover enabled
			
			t.setAccordion(); //fill depending on current active accordion
			
			cssCurrentEdit = jQuery('input[name="layer_caption"]').val();
			
			jQuery('.css-edit-enable').hide();
			jQuery('#css_editor_allow').text('');
			
		});	//edit css button click	
	}
	
	/**
	 * register events and functions
	 */
	var initEditorElements = function(){
	
		jQuery("#change-type-idle").click(function(){
			jQuery('.css-edit-enable').hide();
			jQuery('#css_editor_allow').text('');
			
			setActiveStylesFromExample(); //get Styles from example
			updateCurFullClass(); //update curFullClass with curActiveStyles
			
			cssCurrentType = 'params';
			setActiveStyles(cssCurrentType); //fill curActiveStyles
			
			updateEditorFromActiveStyles();
			
			jQuery(".change-type").removeClass('selected');
			jQuery(this).addClass('selected');
		});
		
		jQuery("#change-type-hover").click(function(){
			jQuery('.css-edit-enable').show();
			jQuery('#css_editor_allow').text(':hover');
			
			setActiveStylesFromExample(); //get Styles from example
			updateCurFullClass(); //update curFullClass with curActiveStyles

			cssCurrentType = 'hover';
			setActiveStyles(cssCurrentType, true);  //fill curActiveStyles
	
			updateEditorFromActiveStyles();
			
			jQuery(".change-type").removeClass('selected');
			jQuery(this).addClass('selected');
		});
		
		jQuery('.css_editor-disable-inputs').click(function(){
			if(confirm("Making changes to these settings will probably overwrite advanced settings. Continue?") == true) hideCssExpertWarning();
		});
		
		jQuery("#font-size-slider").slider({
			range: "min",
			min: 6,
			max: 150,
			slide: function(event, ui) {
				jQuery('input[name="css_font-size"]').val(ui.value+'px');
				jQuery(this).children(".ui-slider-handle").text(ui.value+'px');
				t.setCssPreviewLive();
			}
		});
		
		jQuery("#line-height-slider").slider({
			range: "min",
			min: 6,
			max: 180,
			slide: function(event, ui) {
				jQuery('input[name="css_line-height"]').val(ui.value+'px');
				jQuery(this).children(".ui-slider-handle").text(ui.value+'px');
				t.setCssPreviewLive();
			}
		});
		
		jQuery("#font-weight-slider").slider({
			range: "min",
			min: 100,
			max: 900,
			step: 100,
			slide: function(event, ui) {
				jQuery('input[name="css_font-weight"]').val(ui.value);
				jQuery(this).children(".ui-slider-handle").text(ui.value);
				t.setCssPreviewLive();
			}
		});
		
		jQuery("#border-width-slider").slider({
			range: "min",
			min: 0,
			max: 25,
			slide: function(event, ui) {
				jQuery('input[name="css_border-width"]').val(ui.value+'px');
				jQuery(this).children(".ui-slider-handle").text(ui.value+'px');
				t.setCssPreviewLive();
			}
		});
		
		jQuery("#background-transparency-slider").slider({
			range: "min",
			min: 0,
			max: 100,
			slide: function(event, ui) {
				jQuery('input[name="css_background-transparency"]').val(ui.value / 100);
				jQuery(this).children(".ui-slider-handle").text(ui.value+'%');
				t.setCssPreviewLive();
			}
		});
		
		jQuery(".subslider").each(function() {

			var pslider = jQuery(this);       
			var psliderpa = pslider.parent().find('.sub-input');

			psliderpa.on("focus",function() {
				jQuery(".subslider").each(function() {
					jQuery(this).css({visibility:"hidden"});
					jQuery(this).parent().removeClass("activated_padder")
				})
				pslider.css({visibility:'visible'});
				psliderpa.parent().addClass("activated_padder");
			});

			psliderpa.on("change",function() {
				pslider.slider("value",psliderpa.val());
				pslider.children(".ui-slider-handle").text(psliderpa.val()+"px");
			});

			pslider. slider({
				range: "min",
				min: 0,
				max: 150,       
				slide: function(event, ui) {
					psliderpa.val(ui.value);
					jQuery(this).children(".ui-slider-handle").text(ui.value+"px");
					t.setCssPreviewLive();
				}
			});

			// PREPARING THE SLIDER
			pslider.slider("value",psliderpa.val());
			pslider.children(".ui-slider-handle").text(psliderpa.val()+"px");
			pslider.css({visibility:"hidden"});
		});
		
		jQuery('.css_edit_novice').on('change', function() {
			t.setCssPreviewLive();
		});
		
	}
	
	/**
	 * init the accordion
	 */
	var initAccordion = function(){
		jQuery("#css-editor-accordion").accordion({
			heightStyle: "content",
			activate: function(event, ui){
				t.setAccordion();
			}
		});

	}
	
	//======================================================
	//	General Functions
	//======================================================
	
	/**
	 * check for hiding the expert warning
	 */
	jQuery('.css_editor-disable-inputs').click(function(){
		if(confirm("Making changes to these settings will probably overwrite advanced settings. Continue?") == true) hideCssExpertWarning();
	});
	
	/**
	 * reset tab to idle state
	 */
	var resetTabsToIdle = function(){
		cssCurrentType = 'params';
		jQuery(".change-type").removeClass('selected');
		jQuery("#change-type-idle").addClass('selected');
	}
	
	/**
	 * fill temp class with init class if found
	 */
	var setFullClass = function(){
		curFullClass = new Object;
		for(var key in initCssStyles){
			if(initCssStyles[key]['handle'] == cssPreClass+'.'+jQuery("#layer_caption").val()){
				curFullClass = jQuery.extend({},initCssStyles[key]);
				break;
			}
		}
	}
	
	/**
	 * set current active styles object
	 */
	var setActiveStyles = function(setToType, fallbackToIdle){
		curActiveStyles = new Object;
		
		if(typeof curFullClass[setToType] === 'object' && !jQuery.isEmptyObject(curFullClass[setToType])){
			curActiveStyles = curFullClass[setToType];
		}else if(typeof fallbackToIdle !== 'undefined'){ //fall back to idle if i.e. hover does not exist
			curActiveStyles = curFullClass['params'];
		}
		checkBackgroundTransparency();
	};
	
	/**
	 * fill curFullClass with curActiveStyles
	 */
	var updateCurFullClass = function(){
		curFullClass[cssCurrentType] = curActiveStyles;
	};
	
	/**
	 * show the expert warning, novice could overwrite expert
	 */
	var showCssExpertWarning = function(){
		jQuery('.css_editor-disable-inputs').show();
	}
	
	/**
	 * hide the expert warning, novice could overwrite expert
	 */
	var hideCssExpertWarning = function(){
		jQuery('.css_editor-disable-inputs').hide();
		showExpertWarning = false;
	}
	
	/**
	 * reset the subslider (padding and corner sliders)
	 */
	var resetSubSlider = function(){
		jQuery(".subslider").each(function() {

			var pslider = jQuery(this);       
			var psliderpa = pslider.parent().find('.sub-input');
			
			//PREPARING THE SLIDER
			pslider.slider("value",psliderpa.val());
			pslider.children(".ui-slider-handle").text(psliderpa.val()+"px");       
			pslider.css({visibility:"hidden"});
		});
	};
	
	/**
	 * check if hover is enabled/disabled and set the novice param for it
	 */
	var setHoverActive = function(){
		isHoverActive = false;
		jQuery('input[name="css_allow"]').attr('checked', false);
		
		if(typeof curFullClass['settings'] === 'object' && !jQuery.isEmptyObject(curFullClass['settings'])){
			if(typeof curFullClass['settings']['hover'] != 'undefined' && (curFullClass['settings']['hover'] == 'true' || curFullClass['settings']['hover'] === true)){
				isHoverActive = true;
				jQuery('input[name="css_allow"]').attr('checked', true);
			}
		}
	}
	
	/**
	 * check for background-transparency value
	 */
	var checkBackgroundTransparency = function(){
		if(!jQuery.isEmptyObject(curActiveStyles)){
			if('background-color' in curActiveStyles){ //check for transparency and put it into background-transparency
				var transparency = UniteAdminRev.getTransparencyFromRgba(curActiveStyles['background-color']);
				if(transparency !== false)
					curActiveStyles['background-transparency'] = transparency;
				else
					delete curActiveStyles['background-transparency'];
			}
		}
	};
	
	/**
	 * set the accordion entrys
	 */
	t.setAccordion = function(){
		if(g_codemirrorCssExpert != null) g_codemirrorCssExpert.refresh();
		cssExpertEditor = (jQuery("#css-editor-accordion").accordion("option").active == 0) ? false : true;
		if(cssExpertEditor) t.setCssStylesExpert();
		if(!cssExpertEditor) t.setCssStylesNovice();
	}
	
	/**
	 * creates the padding & corner in 1 line
	 */
	var filterCssPadCor = function(id){
		var retObj = [];
		var i = 0;
		var found = 0;
		jQuery(id).each(function(){
			retObj[i] = jQuery(this).val();
			if(retObj[i] != '') found++;
			i++;
		});
		
		switch(found){
			case 0:
				return false; //empty, no entrys found
				break;
			case 1:
				for(key in retObj){
					if(retObj[key] != '') return retObj[key]+'px';
				}
				break;
			case 2:
				var checkVal = 0;
				for(key in retObj){
					if(retObj[key] != '') checkVal+= parseInt(key);
				}
				
				switch(checkVal){
					case 1: // 1 1 x x
						return retObj[0]+'px '+retObj[1]+'px';
						break;
					case 2: // 1 x 1 x
						if(retObj[0] == retObj[2])
							return retObj[0]+'px 0';
						else
							return retObj[0]+'px 0 '+retObj[2]+'px';
						break;
					case 3: // 1 x x 1 || x 1 1 x
						if(retObj[0] != '')
							return retObj[0]+'px '+retObj[3]+'px';
						else
							return retObj[2]+'px '+retObj[1]+'px';
						break;
					case 4: // x 1 x 1
						if(retObj[1] == retObj[3])
							return '0 '+retObj[1]+'px ';
						else
							return '0 '+retObj[1]+'px 0 '+retObj[3]+'px';
					case 5: // x x 1 1
						return retObj[2]+'px '+retObj[3]+'px';
					default:
						return false;
				}
				break;
			case 3:
				if(retObj[3] != ''){
					for(key in retObj){
						if(retObj[key] == '') retObj[key] = '0';
					}
				}
				return retObj[0]+'px '+retObj[1]+'px '+retObj[2]+'px';
				break;
			case 4:
			default:
				return retObj[0]+'px '+retObj[1]+'px '+retObj[2]+'px '+retObj[3]+'px';
				break;
		}
	}
	
	/**
	 * reset all novice fields 
	 */
	var resetNoviceFields = function(){
		jQuery('input[name="css_font-size"]').val('');
		jQuery('input[name="css_line-height"]').val('');
		jQuery('input[name="css_font-weight"]').val('');
		jQuery('input[name="css_font-family"]').val('');
		jQuery('input[name="css_font-style"]').attr('checked', false);
		jQuery('input[name="css_color"]').css('background-color', '');
		jQuery('input[name="css_color"]').val(' ');
		jQuery('input[name="css_background-transparency"]').val('1');
		jQuery('input[name="css_background-color"]').val('transparent');
		jQuery('input[name="css_background-color"]').css('background-color', '');
		jQuery('input[name="css_border-color"]').val(' ');
		jQuery('input[name="css_border-color-show"]').val(' ');
		jQuery('input[name="css_border-color-show"]').css('background-color', '');
		jQuery('input[name="css_border-width"]').val('');
		jQuery('select[name="css_border-style"]').val('none');
		jQuery('select[name="css_text-decoration"]').val('none');
		jQuery('input[name="css_padding[]"]').each(function(){jQuery(this).val('');});
		jQuery('input[name="css_border-radius[]"]').each(function(){jQuery(this).val('');});
		jQuery("#font-size-slider").slider("value", '8');
		jQuery("#font-size-slider").children(".ui-slider-handle").text('8px');
		jQuery("#line-height-slider").slider("value", '0');
		jQuery("#line-height-slider").children(".ui-slider-handle").text('10px');
		jQuery("#font-weight-slider").slider("value", '400');
		jQuery("#font-weight-slider").children(".ui-slider-handle").text('400');
		jQuery("#border-width-slider").slider("value", '0');
		jQuery("#border-width-slider").children(".ui-slider-handle").text('0px');
		jQuery("#background-transparency-slider").slider("value", '100');
		jQuery("#background-transparency-slider").children(".ui-slider-handle").text('100%');
	}
	
	/**
	 * set the novice fields
	 */
	var setNoviceFields = function(){
		showExpertWarning = false;
		
		if('font-size' in curActiveStyles){
			jQuery('input[name="css_font-size"]').val(curActiveStyles['font-size']);
			jQuery("#font-size-slider").slider("value", curActiveStyles['font-size'].replace('px', ''));
			jQuery("#font-size-slider").children(".ui-slider-handle").text(curActiveStyles['font-size']);
		}
		if('line-height' in curActiveStyles){
			jQuery('input[name="css_line-height"]').val(curActiveStyles['line-height']);
			jQuery("#line-height-slider").slider("value", curActiveStyles['line-height'].replace('px', ''));
			jQuery("#line-height-slider").children(".ui-slider-handle").text(curActiveStyles['line-height']);
		}
		if('font-weight' in curActiveStyles){
			jQuery('input[name="css_font-weight"]').val(curActiveStyles['font-weight']);
			jQuery("#font-weight-slider").slider("value", curActiveStyles['font-weight']);
			jQuery("#font-weight-slider").children(".ui-slider-handle").text(curActiveStyles['font-weight']);
		}
		if('border-width' in curActiveStyles){
			if(curActiveStyles['border-width'] !== 0){
				jQuery('input[name="css_border-width"]').val(curActiveStyles['border-width']);
				
				if(curActiveStyles['border-width'].split(' ').length > 1){			
					var firstBorderWidth = curActiveStyles['border-width'].split(' ')[0];
					jQuery("#border-width-slider").slider("value", firstBorderWidth.replace('px', ''));
					jQuery("#border-width-slider").children(".ui-slider-handle").text(firstBorderWidth);
					
					showExpertWarning = true;
				}else{
					jQuery("#border-width-slider").slider("value", curActiveStyles['border-width'].replace('px', ''));
					jQuery("#border-width-slider").children(".ui-slider-handle").text(curActiveStyles['border-width']);
				}
				
			}
		}
		if('background-transparency' in curActiveStyles){
			if(curActiveStyles['border-width'] !== 0){
				jQuery('input[name="css_background-transparency"]').val(curActiveStyles['background-transparency']);
				jQuery("#background-transparency-slider").slider("value", curActiveStyles['background-transparency'] * 100);
				jQuery("#background-transparency-slider").children(".ui-slider-handle").text(Math.floor(curActiveStyles['background-transparency'] * 100) +'%');
			}
		}else if('background-color' in curActiveStyles){
			var bgc_length = curActiveStyles['background-color'].split(',');
			if(bgc_length.length == 4){
				var transparency = jQuery.trim(bgc_length[3].replace(')', ''));
				curActiveStyles['background-transparency'] = transparency;
				jQuery('input[name="css_background-transparency"]').val(transparency);
				jQuery("#background-transparency-slider").slider("value", transparency * 100);
				jQuery("#background-transparency-slider").children(".ui-slider-handle").text(Math.floor(transparency * 100) +'%');
			}
		}
		
		if('font-family' in curActiveStyles)	jQuery('input[name="css_font-family"]').val(curActiveStyles['font-family']);
		if('color' in curActiveStyles)			jQuery('input[name="css_color"]').val(UniteAdminRev.rgb2hex(curActiveStyles['color']));
		if('background-color' in curActiveStyles)jQuery('input[name="css_background-color"]').val(UniteAdminRev.rgb2hex(curActiveStyles['background-color']));
		
		jQuery('input[name="css_font-style"]').attr('checked', false);
		if('font-style' in curActiveStyles){
			if(curActiveStyles['font-style'] == 'italic') jQuery('input[name="css_font-style"]').attr('checked', true);
		}
		
		if('text-decoration' in curActiveStyles){
			jQuery('select[name="css_text-decoration"]').val(curActiveStyles['text-decoration']);
		}
		
		
		if('border-color' in curActiveStyles){
			var borderColor = UniteAdminRev.rgb2hex(curActiveStyles['border-color']);
			if(borderColor.split(' ').length > 1){
				var firstBorderColor = borderColor.split(' ')[0];
				jQuery('input[name="css_border-color"]').val(borderColor);
				jQuery('input[name="css_border-color-show"]').val(firstBorderColor);
				
				showExpertWarning = true;
			}else{
				jQuery('input[name="css_border-color"]').val(borderColor);
				jQuery('input[name="css_border-color-show"]').val(borderColor);
			}
		}
		
		if('border-style' in curActiveStyles){
			if(curActiveStyles['border-style'].split(' ').length > 1){			
				var firstBorderStyle = curActiveStyles['border-style'].split(' ')[0];
				jQuery('select[name="css_border-style"]').val(firstBorderStyle);
				
				showExpertWarning = true;
			}else{
				jQuery('select[name="css_border-style"]').val(curActiveStyles['border-style']);
			}
		}
		
		if('color' in curActiveStyles) jQuery('input[name="css_color"]').css('background-color', UniteAdminRev.rgb2hex(curActiveStyles['color']));
		if('background-color' in curActiveStyles) jQuery('input[name="css_background-color"]').css('background-color', UniteAdminRev.rgb2hex(curActiveStyles['background-color']));
		if('border-color' in curActiveStyles){
			if(borderColor.split(' ').length > 1){
				var firstBorderColor = borderColor.split(' ')[0];
				jQuery('input[name="css_border-color-show"]').css('background-color', UniteAdminRev.rgb2hex(firstBorderColor));
			}else{
				jQuery('input[name="css_border-color-show"]').css('background-color', UniteAdminRev.rgb2hex(borderColor));
			}
		}
		
		if('padding' in curActiveStyles){
			
			var paddings = UniteAdminRev.parseCssMultiAttribute(curActiveStyles['padding']);
			
			var i = 0;
			jQuery('input[name="css_padding[]"]').each(function(){
				if(paddings !== false)
					jQuery(this).val(paddings[i].replace('px', ''));
				else
					jQuery(this).val('');
					
				i++;
			});
		}
		if('padding-top' in curActiveStyles)	jQuery('input[name="css_padding[]"]:eq(0)').val(curActiveStyles['padding-top'].replace('px', ''));
		if('padding-right' in curActiveStyles)	jQuery('input[name="css_padding[]"]:eq(1)').val(curActiveStyles['padding-right'].replace('px', ''));
		if('padding-bottom' in curActiveStyles)	jQuery('input[name="css_padding[]"]:eq(2)').val(curActiveStyles['padding-bottom'].replace('px', ''));
		if('padding-left' in curActiveStyles)	jQuery('input[name="css_padding[]"]:eq(3)').val(curActiveStyles['padding-left'].replace('px', ''));
		
		
		if('border-radius' in curActiveStyles){
			var corners = UniteAdminRev.parseCssMultiAttribute(curActiveStyles['border-radius']);
			var i = 0;
			jQuery('input[name="css_border-radius[]"]').each(function(){ 
				if(corners !== false)
					jQuery(this).val(corners[i].replace('px', ''));
				else
					jQuery(this).val('');
					
				i++;
			});
		}
		if('border-top-left-radius' in curActiveStyles)		jQuery('input[name="css_border-radius[]"]:eq(0)').val(curActiveStyles['border-top-left-radius'].replace('px', ''));
		if('border-top-right-radius' in curActiveStyles)	jQuery('input[name="css_border-radius[]"]:eq(1)').val(curActiveStyles['border-top-right-radius'].replace('px', ''));
		if('border-bottom-right-radius' in curActiveStyles)	jQuery('input[name="css_border-radius[]"]:eq(2)').val(curActiveStyles['border-bottom-right-radius'].replace('px', ''));
		if('border-bottom-left-radius' in curActiveStyles)	jQuery('input[name="css_border-radius[]"]:eq(3)').val(curActiveStyles['border-bottom-left-radius'].replace('px', ''));
		
		if(showExpertWarning){
			showCssExpertWarning();
		}else{
			hideCssExpertWarning();
		}
	}
	
	/**
	 * set the css example preview in dialog
	 */
	var setCssPreview = function(){
		jQuery('#css_preview').attr('styles', ''); //clear all styles from preview
		
		if(typeof curActiveStyles === 'object' && !jQuery.isEmptyObject(curActiveStyles)){
			for(var attr in curActiveStyles){
				if(attr == 'position') continue; //ignore position absolute
				jQuery('#css_preview').css(attr, curActiveStyles[attr]);
			}
		}
	}
	
	
	/**
	 * set the css example preview in dialog on resize
	 */
	t.setCssPreviewLive = function(){
		if(cssExpertEditor){
			setStylesFromExpert();
		}else{
			//add novice styles
			jQuery('#css_preview').attr('style', ''); 
			var borderColor = (jQuery('input[name="css_border-color"]').val() != ' ') ? jQuery('input[name="css_border-color"]').val() : '';
			jQuery('#css_preview').css('font-size', jQuery('input[name="css_font-size"]').val());
			jQuery('#css_preview').css('line-height', jQuery('input[name="css_line-height"]').val());
			jQuery('#css_preview').css('font-weight', jQuery('input[name="css_font-weight"]').val());
			jQuery('#css_preview').css('border-width', jQuery('input[name="css_border-width"]').val());
			jQuery('#css_preview').css('font-family', jQuery('input[name="css_font-family"]').val());
			jQuery('#css_preview').css('color', jQuery('input[name="css_color"]').val());
			jQuery('#css_preview').css('border-color', borderColor);
			jQuery('#css_preview').css('border-style', jQuery('select[name="css_border-style"]').val());
			var italic = (jQuery('input[name="css_font-style"]').is(':checked')) ? 'italic' : '';
			jQuery('#css_preview').css('font-style', italic);
			jQuery('#css_preview').css('text-decoration', jQuery('select[name="css_text-decoration"]').val());
			
			if(jQuery('input[name="css_background-color"]').val() != 'transparent'){
				var rgb = UniteAdminRev.convertHexToRGB(jQuery('input[name="css_background-color"]').val());
				
				var transparency = (jQuery('input[name="css_background-transparency"]').val() != '') ? transparency = jQuery('input[name="css_background-transparency"]').val() : 1;
				jQuery('input[name="css_background-transparency"]').val(transparency);
				jQuery('#css_preview').css('background-color', 'rgba('+rgb[0]+', '+rgb[1]+', '+rgb[2]+', '+transparency+')');
			}else{
				jQuery('#css_preview').css('background-color', jQuery('input[name="css_background-color"]').val());
			}
			
			var padding = '';
			jQuery('input[name="css_padding[]"]').each(function(){
				if(padding != '') padding += ' ';
				padding += (jQuery(this).val() == '') ? '' : parseInt(jQuery(this).val())+'px';
			});
			jQuery('#css_preview').css('padding', padding);
			
			var corners = '';
			jQuery('input[name="css_border-radius[]"]').each(function(){
				if(corners != '') corners += ' ';
				corners += (jQuery(this).val() == '') ? '' : parseInt(jQuery(this).val())+'px';
			});
			jQuery('#css_preview').css('border-radius', corners);
			
			isHoverActive = (jQuery('input[name="css_allow"]').is(':checked')) ? true : false;
			
			setPreviewFromExpert();
			return false;
		}
		
		setActiveStylesFromExample();
		updateCurFullClass();
	}
	
	/**
	 * set styles from expert editor
	 */
	var setStylesFromExpert = function(){
		var cssData = g_codemirrorCssExpert.getValue();
		while(cssData.indexOf("/*") !== -1){
			if(cssData.indexOf("*/") === -1) return false;
			var start = cssData.indexOf("/*");
			var end = cssData.indexOf("*/") + 2;
			cssData = cssData.replace(cssData.substr(start, end - start), '');
		}
		
		//delete all before the }
		if(cssData.indexOf('{') > -1){
			var temp = cssData.substr(0,cssData.indexOf('{'));
			cssData = cssData.replace(temp, '');
		}
		
		//delete all after the }
		if(cssData.indexOf('}') > -1){
			cssData = cssData.substr(0,cssData.indexOf('}'));
		}
		
		cssData = cssData.replace(/{/g, '').replace(/}/g, '').replace(/	/g, '').replace(/\n/g, '');
		
		jQuery('#css_preview').attr('style', cssData);
		if(jQuery('#css_preview').css('position') == 'absolute') jQuery('#css_preview').css('position', '');
		
	}
	
	/**
	 * create curActiveStyles object depending on novice/expert mode
	 */
	var setActiveStylesFromExample = function(){
	
		curActiveStyles = new Object;
		var rawStyles = jQuery('#css_preview').attr('style').split(';');
		
		for(key in rawStyles){
			var temp = new String(rawStyles[key]);
            temp = temp.split(':');
			//alert('now: '+temp[0]+ '||'+temp[1]+ '||'+temp[2]);
			if(jQuery.trim(temp[0]) == '' || jQuery.trim(temp[1]) == '') continue;
			if(temp[0].toLowerCase().indexOf("border") >= 0) continue; //all borders later
			
			var cur_attr = jQuery.trim(temp[0]);
			var cur_style = temp[1];
			
			if(typeof(temp[2]) !== 'undefined'){
				delete temp[0];
				cur_style = temp[1]+':'+temp[2];
			}
			curActiveStyles[cur_attr] = jQuery.trim(cur_style);
		}
		
		//handle borders
		if(jQuery('#css_preview').css('borderTopLeftRadius') != '0px' || jQuery('#css_preview').css('borderTopRightRadius') != '0px' || jQuery('#css_preview').css('borderBottomRightRadius') != '0px' || jQuery('#css_preview').css('borderBottomLeftRadius') != '0px'){
			curActiveStyles['border-radius'] = Math.round(jQuery('#css_preview').css('borderTopLeftRadius').replace('px', ''))+'px '+Math.round(jQuery('#css_preview').css('borderTopRightRadius').replace('px', ''))+'px '+Math.round(jQuery('#css_preview').css('borderBottomRightRadius').replace('px', ''))+'px '+Math.round(jQuery('#css_preview').css('borderBottomLeftRadius').replace('px', ''))+'px';
		}
		
		if(jQuery('#css_preview').css('borderTopWidth') == jQuery('#css_preview').css('borderRightWidth') &&
			jQuery('#css_preview').css('borderTopWidth') == jQuery('#css_preview').css('borderBottomWidth') &&
			jQuery('#css_preview').css('borderTopWidth') == jQuery('#css_preview').css('borderLeftWidth')){
			curActiveStyles['border-width'] = jQuery('#css_preview').css('borderTopWidth');
		}else{
			curActiveStyles['border-width'] = jQuery('#css_preview').css('borderTopWidth')+' '+jQuery('#css_preview').css('borderRightWidth')+' '+jQuery('#css_preview').css('borderBottomWidth')+' '+jQuery('#css_preview').css('borderLeftWidth');
		}
		
		if(jQuery('#css_preview').css('borderTopColor') == jQuery('#css_preview').css('borderRightColor') &&
			jQuery('#css_preview').css('borderTopColor') == jQuery('#css_preview').css('borderBottomColor') &&
			jQuery('#css_preview').css('borderTopColor') == jQuery('#css_preview').css('borderLeftColor')){
			curActiveStyles['border-color'] = jQuery('#css_preview').css('borderTopColor');
		}else{
			curActiveStyles['border-color'] = jQuery('#css_preview').css('borderTopColor')+' '+jQuery('#css_preview').css('borderRightColor')+' '+jQuery('#css_preview').css('borderBottomColor')+' '+jQuery('#css_preview').css('borderLeftColor');
		}
		
		if(jQuery('#css_preview').css('borderTopStyle') == jQuery('#css_preview').css('borderBottomStyle') &&
			jQuery('#css_preview').css('borderTopStyle') == jQuery('#css_preview').css('borderLeftStyle') &&
			jQuery('#css_preview').css('borderTopStyle') == jQuery('#css_preview').css('borderRightStyle')){
			curActiveStyles['border-style'] = jQuery('#css_preview').css('borderTopStyle');
		}else{
			curActiveStyles['border-style'] = jQuery('#css_preview').css('borderTopStyle')+' '+jQuery('#css_preview').css('borderRightStyle')+' '+jQuery('#css_preview').css('borderBottomStyle')+' '+jQuery('#css_preview').css('borderLeftStyle');
		}
		
	}
	
	/**
	 * set the params from expert
	 */
	var setPreviewFromExpert = function(){
		if(typeof curActiveStyles !== 'object' || jQuery.isEmptyObject(curActiveStyles)) return false;
		
		for(var key in curActiveStyles){
			switch(key){ //all but default are values that exist in novice mode, ignore them
				case 'position':
				case 'padding-top':
				case 'padding-right':
				case 'padding-bottom':
				case 'padding-left':
				case 'border-top-left-radius':
				case 'border-top-right-radius':
				case 'border-bottom-right-radius':
				case 'border-bottom-left-radius':
				case 'font-size':
				case 'line-height':
				case 'font-weight':
				case 'border-width':
				case 'font-family':
				case 'color':
				case 'background-color':
				case 'border-style':
				case 'background-transparency':
				case 'padding':
				case 'border-radius':
				case 'border-color':
				case 'font-style':
				case 'text-decoration':
					break;
				default:
					jQuery('#css_preview').css(key, curActiveStyles[key]);
			}
		}
	}
	
	
	/**
	 * insert the styles into the expert editor
	 */
	t.setCssStylesExpert = function(ignoreExample){
		jQuery("#textarea_edit_expert").val('');
		
		var cssData = "{\n"; 
		
		if(typeof ignoreExample === 'undefined') updateActiveStylesWithNovice();
		
		for(var attr in curActiveStyles){
			if(jQuery.trim(curActiveStyles[attr]) == '') continue;
			if(attr == 'background-color' && curActiveStyles[attr] !== 'transparent'){
				if(curActiveStyles[attr].indexOf('rgb') == -1){
					var rgb = UniteAdminRev.convertHexToRGB(curActiveStyles[attr]);
					cssData += '	'+attr+': rgb('+rgb[0]+', '+rgb[1]+', '+rgb[2]+')'+";\n";
					cssData += '	'+attr+': rgba('+rgb[0]+', '+rgb[1]+', '+rgb[2]+', '+curActiveStyles['background-transparency']+')'+";\n";
				}else{
					cssData += '	'+attr+': '+curActiveStyles[attr]+";\n";
				}
			}else{
				if(attr == 'background-transparency') continue;
				cssData += '	'+attr+': '+curActiveStyles[attr]+";\n";
			}
		}

		cssData += "}";
		
		if(g_codemirrorCssExpert != null){
			g_codemirrorCssExpert.setValue(cssData);
		}else{
			jQuery("#textarea_edit_expert").val(cssData);
			t.setCodeMirrorEditor();
		}
		g_codemirrorCssExpert.refresh();
	}
	
	/**
	 * set temp object and call novice update
	 */
	t.setCssStylesNovice = function(ignoreExample){
		resetNoviceFields(); //reset the novice fields
		
		if(typeof ignoreExample === 'undefined') setActiveStylesFromExample()//set styles from example
		
		setNoviceFields(); //set novice fields from cssActiveStyles
		
		setCssPreview(); //fill the preview with styles
		//t.setCssPreviewLive();
	}
	
	/**
	 * update the curActiveStyles from Novice fields
	 */
	var updateActiveStylesWithNovice = function(){
		//remove obsolete padding and corner!
		delete curActiveStyles['padding-top'];
		delete curActiveStyles['padding-right'];
		delete curActiveStyles['padding-bottom'];
		delete curActiveStyles['padding-left'];
		delete curActiveStyles['border-top-left-radius'];
		delete curActiveStyles['border-top-right-radius'];
		delete curActiveStyles['border-bottom-right-radius'];
		delete curActiveStyles['border-bottom-left-radius'];

		var borderColor = (jQuery('input[name="css_border-color"]').val() != ' ') ? jQuery('input[name="css_border-color"]').val() : null;
		
		curActiveStyles['font-size'] = jQuery('input[name="css_font-size"]').val();
		curActiveStyles['line-height'] = jQuery('input[name="css_line-height"]').val();
		curActiveStyles['font-weight'] = jQuery('input[name="css_font-weight"]').val();
		curActiveStyles['font-family'] = jQuery('input[name="css_font-family"]').val();
		curActiveStyles['color'] = jQuery('input[name="css_color"]').val();
		curActiveStyles['background-color'] = jQuery('input[name="css_background-color"]').val();
		curActiveStyles['background-transparency'] = jQuery('input[name="css_background-transparency"]').val();
		curActiveStyles['font-style'] = (jQuery('input[name="css_font-style"]').is(':checked')) ? 'italic' : '';
		curActiveStyles['text-decoration'] = jQuery('select[name="css_text-decoration"]').val();
		
		if(curActiveStyles['font-style'] == '') delete curActiveStyles['font-style'];
		
		//don`t update if expert warning is shown
		if(!showExpertWarning){
			curActiveStyles['border-width'] = jQuery('input[name="css_border-width"]').val();
			curActiveStyles['border-style'] = jQuery('select[name="css_border-style"]').val();
			curActiveStyles['border-radius'] = filterCssPadCor('input[name="css_border-radius[]"]');
			if(borderColor != null)
				curActiveStyles['border-color'] =  borderColor;
			else
				delete curActiveStyles['border-color'];
			
		}
		
		curActiveStyles['padding'] = filterCssPadCor('input[name="css_padding[]"]');
		
		if(curActiveStyles['padding'] === false) delete curActiveStyles['padding'];
		if(curActiveStyles['border-radius'] === false) delete curActiveStyles['border-radius'];
	}
	
	/**
	 * set the expert/novice from curActiveStyles
	 */
	var updateEditorFromActiveStyles = function(){
		cssExpertEditor = (jQuery("#css-editor-accordion").accordion("option").active == 0) ? false : true;
		if(cssExpertEditor) t.setCssStylesExpert(true);
		if(!cssExpertEditor) t.setCssStylesNovice(true);
	}
	
	/**
	 * delete class from db if exists
	 */
	var deleteStylesInDb = function(handle, id){
		UniteAdminRev.setErrorMessageID("dialog_error_message");
		
		UniteAdminRev.ajaxRequest("delete_captions_css",handle,function(response){
			jQuery("#dialog_success_message").show().html(response.message);
		
			//update html select (got as "data" from response)
			updateCaptionsInput(response.arrCaptions);
		});
		
		updateInitCssStyles(handle, id, true);
		
		jQuery('#layer_caption').val('');
		
		curFullClass = new Object;
		curActiveStyles = new Object;
		cssCurrentEdit = '';
		
		//refresh styles
		setTimeout(function() {
			if(urlCssCaptions)
				UniteAdminRev.loadCssFile(urlCssCaptions,"rs-plugin-captions-css");
		},1000);
	}
	
	/**
	 * update styles for class/create new class
	 */
	var updateStylesInDb = function(handle, id){
		
		UniteAdminRev.setErrorMessageID("dialog_error_message");
		
		var temp = new Object;
		jQuery.each(curFullClass, function(i, val){
			var newObj = jQuery.extend(true, {}, val);
			temp[i] = newObj;
		});
		
		temp['handle'] = handle;
		temp['settings'] = new Object;
		temp['settings']['hover'] = isHoverActive;

		
		if(id === false){ //create new
			//insert in database
			UniteAdminRev.ajaxRequest("insert_captions_css",temp,function(response){
				jQuery("#dialog_success_message").show().html(response.message);
			
				//update html select (got as "data" from response)
				updateCaptionsInput(response.arrCaptions);
			});
			
		}else{ //update existing
			
			//update to database
			UniteAdminRev.ajaxRequest("update_captions_css",temp,function(response){
				jQuery("#dialog_success_message").show().html(response.message);
			
				//update html select (got as "data" from response)
				updateCaptionsInput(response.arrCaptions);
			});
			
		}
		updateInitCssStyles(handle, id);
		
		curFullClass = new Object;
		curActiveStyles = new Object;
		cssCurrentEdit = '';
		
		//refresh styles
		setTimeout(function() {
			if(urlCssCaptions)
				UniteAdminRev.loadCssFile(urlCssCaptions,"rs-plugin-captions-css");
		},1000);
		
	}
	
	
	/**
	 * check if class exists and return index
	 */
	var checkIfHandleExists = function(handle){
		for(var key in initCssStyles){
			if(initCssStyles[key]['handle'] == cssPreClass+'.'+handle){
				return key;
			}
		}
		return false;
	}
	
	/**
	 * update the select html, set selected option, and update events.
	 */
	var updateCaptionsInput = function(arrCaptions){
		jQuery("#layer_caption").autocomplete("option","source",arrCaptions);
	}
	
	/**
	 * update css object with new values
	 */
	var updateInitCssStyles = function(handle, id, doDelete){
		var key = false;
		
		for(var i in initCssStyles){
			if(initCssStyles[i]['handle'] == cssPreClass+'.'+handle){
				key = i;
				break;
			}
		}
		
		if(typeof doDelete !== 'undefined'){
			delete initCssStyles[key];
			return true;
		}
		
		if(key === false) key = initCssStyles.length;
		
		if(id === false){
			id = initCssStyles.length;
			initCssStyles[key] = new Object;
			initCssStyles[key]['id'] = id;
			initCssStyles[key]['handle'] = cssPreClass+'.'+handle;
			initCssStyles[key]['params'] = [];
			initCssStyles[key]['hover'] = [];
			initCssStyles[key]['settings'] = [];
		}
		
		initCssStyles[key]['params'] = curFullClass['params'];
		initCssStyles[key]['hover'] = curFullClass['hover'];
		initCssStyles[key]['settings'] = new Object;
		initCssStyles[key]['settings']['hover'] = isHoverActive;
		
		return initCssStyles[key];
	}
	
	
	//======================================================
	//	Codemirror Functions
	//======================================================
	
	/**
	 * set code mirror editor
	 */
	t.setCodeMirrorEditor = function(){
		g_codemirrorCssExpert = CodeMirror.fromTextArea(document.getElementById("textarea_edit_expert"), {
			onChange: function(){ if(cssExpertEditor){ t.setCssPreviewLive(); }},
			lineNumbers: true
		});
		
	}
	
	//======================================================
	//	End of Codemirror Functions
	//======================================================
	
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
var UniteAdminRev = new function(){
	
	var t = this;
	
	var errorMessageID = null;
	var successMessageID = null;
	var ajaxLoaderID = null;
	var ajaxHideButtonID = null;
	var g_multiple_text_key = [];
	
	//video dialog vars:
	var lastVideoData = null;		//last fetched data
	var lastVideoCallback = null;   //last callback from video dialog return
	var colorPickerCallback = null;
	
	

	/**********************************
		-	SHOW INFO AND HIDE INFO	-
	********************************/

	t.showInfo = function(obj) {

		var info = '<i class="eg-icon-info"></i>';
		if (obj.type=="warning") info = '<i class="eg-icon-cancel"></i>';
		if (obj.type=="success") info = '<i class="eg-icon-ok"></i>';

		obj.showdelay = obj.showdelay != undefined ? obj.showdelay : 0;
		obj.hidedelay = obj.hidedelay != undefined ? obj.hidedelay : 0;

		// CHECK IF THE TOOLBOX WRAPPER EXIST ALREADY
		if (jQuery('#eg-toolbox-wrapper').length==0) jQuery('#viewWrapper').append('<div id="eg-toolbox-wrapper"></div>');

		// ADD NEW INFO BOX
		jQuery('#eg-toolbox-wrapper').append('<div class="eg-toolbox newadded">'+info+obj.content+'</div>');
		var nt = jQuery('#eg-toolbox-wrapper').find('.eg-toolbox.newadded');
		nt.removeClass('newadded');


		// ANIMATE THE INFO BOX
		punchgs.TweenLite.fromTo(nt,0.5,{y:-50,autoAlpha:0,transformOrigin:"50% 50%", transformPerspective:900, rotationX:-90},{autoAlpha:1,y:0,rotationX:0,ease:punchgs.Back.easeOut,delay:obj.showdelay});

		if (obj.hideon != "event") {
			nt.click(function() {
				punchgs.TweenLite.to(nt,0.3,{x:200,ease:punchgs.Power3.easeInOut,autoAlpha:0,onComplete:function() {nt.remove()}});
			})

			if (obj.hidedelay !=0 && obj.hideon!="click")
				punchgs.TweenLite.to(nt,0.3,{x:200,ease:punchgs.Power3.easeInOut,autoAlpha:0,delay:obj.hidedelay + obj.showdelay, onComplete:function() {nt.remove()}});
		} else  {
			jQuery('#eg-toolbox-wrapper').on(obj.event,function() {
				punchgs.TweenLite.to(nt,0.3,{x:200,ease:punchgs.Power3.easeInOut,autoAlpha:0,onComplete:function() {nt.remove()}});
			});
		}
	}
    
	/**
	 * escape html, turn html to a string
	 */
	t.htmlspecialchars = function(string){
		  return string
		      .replace(/&/g, "&amp;")
		      .replace(/</g, "&lt;")
		      .replace(/>/g, "&gt;")
		      .replace(/"/g, "&quot;")
		      .replace(/'/g, "&#039;");
	}	
	
	/**
	 * Find absolute position on the screen of some element
	 */	
	t.getAbsolutePos = function(obj){
	  var curleft = curtop = 0;
		if (obj.offsetParent) {
			curleft = obj.offsetLeft;
			curtop = obj.offsetTop;
			while (obj = obj.offsetParent) {
				curleft += obj.offsetLeft;
				curtop += obj.offsetTop;
			}
		}			
		return[curleft,curtop];
	}	
	
	t.stripslashes = function(str) {
		return (str + '').replace(/\\(.?)/g, function (s, n1) {
			switch (n1) {
				case '\\':
				return '\\';
				case '0':
				return '\u0000';
				case '':
				return '';
				default:
				return n1;
			}
		});
	}
	
	/**
	 * turn string value ("true", "false") to string 
	 */
	t.strToBool = function(str){
		
		if(str == undefined)
			return(false);
			
		if(typeof(str) != "string")
			return(false);
		
		str = str.toLowerCase();
		
		var bool = (str == "true")?true:false;
		return(bool);
	}
	
	/**
	 * set callback on color picker movement
	 */
	t.setColorPickerCallback = function(callbackFunc){
		colorPickerCallback = callbackFunc;
	}
	
	/**
	 * on color picker event. Pass the event further
	 */
	t.onColorPickerMoveEvent = function(event){
		
		if(typeof colorPickerCallback == "function")
			colorPickerCallback(event);
	}
	
	
	/**
	 * strip html tags
	 */
	t.stripTags = function(input, allowed) {
	    allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
	    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
	        commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
	    return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {
	        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
	    });
	}
	
	/**
	 * change rgb & rgba to hex
	 */
	t.rgb2hex = function(rgb) {
		if (rgb.search("rgb") == -1 || jQuery.trim(rgb) == '') return rgb; //ie6
		
		function hex(x) {
			return ("0" + parseInt(x).toString(16)).slice(-2);
		}
		
		if(rgb.indexOf('-moz') > -1){
			var temp = rgb.split(' ');
			delete temp[0];
			rgb = jQuery.trim(temp.join(' '));
		}
		
		if(rgb.split(')').length > 2){
			var hexReturn = '';
			var rgbArr = rgb.split(')');
			for(var i = 0; i < rgbArr.length - 1; i++){
				rgbArr[i] += ')';
				var temp = rgbArr[i].split(',');
				if(temp.length == 4){
					rgb = temp[0]+','+temp[1]+','+temp[2];
					rgb += ')';
				}else{
					rgb = rgbArr[i];
				}
				rgb = jQuery.trim(rgb);
				
				rgb = rgb.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/);
				
				hexReturn += "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3])+" ";
			}
			
			return hexReturn;
		}else{
			var temp = rgb.split(',');
			if(temp.length == 4){
				rgb = temp[0]+','+temp[1]+','+temp[2];
				rgb += ')';
			}
			
			rgb = rgb.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/);
			
			return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
		}
		
		
	}
	
	/**
	 * get transparency value from 0 to 100
	 */
	t.getTransparencyFromRgba = function(rgba, inPercent){
		var temp = rgba.split(',');
		if(temp.length == 4){
			inPercent = (typeof inPercent !== 'undefined') ? inPercent : true;
			return (inPercent) ? temp[3].replace(/[^\d.]/g, "") : temp[3].replace(/[^\d.]/g, "") * 100;
		}
		
		return false;
	}
	
	/**
	 * debug html on the top of the page (from the master view)
	 */
	t.debug = function(html){
		jQuery("#div_debug").show().html(html);
	}
	
	/**
	 * output data to console
	 */
	t.trace = function(data,clear){
		if(clear && clear == true)
			console.clear();	
		console.log(data);
	}
	
	/**
	 * show error message or call once custom handler function
	 */
	t.showErrorMessage = function(htmlError){
		//if(errorMessageID !== null){
		//	jQuery("#"+errorMessageID).show().html(htmlError);			
		//}else
		//	jQuery("#error_message").show().html(htmlError);
		
		t.showInfo({content:htmlError, type:"warning", showdelay:0, hidedelay:5, hideon:"click", event:"" });
		
		showAjaxButton();
	}

	/**
	 * hide error message
	 */
	var hideErrorMessage = function(){
		if(errorMessageID !== null){
			jQuery("#"+errorMessageID).hide();
			errorMessageID = null;
		}else
			jQuery("#error_message").hide();
	}
	
	
	/**
	 * set error message id
	 */
	t.setErrorMessageID = function(id){
		errorMessageID = id;
	}
	
	
	
	/**
	 * set success message id
	 */
	t.setSuccessMessageID = function(id){
		successMessageID = id;
	}
	
	/**
	 * show success message
	 */
	var showSuccessMessage = function(htmlSuccess){
		//var id = "#success_message";		
		//var delay = 2000;
		//if(successMessageID){
		//	id = "#"+successMessageID;
		//	delay = 500;
		//}
		
		t.showInfo({content:htmlSuccess, type:"success", showdelay:0, hidedelay:5, hideon:"", event:"" });
		
		//jQuery(id).show().html(htmlSuccess);
		//setTimeout("UniteAdminRev.hideSuccessMessage()",delay);
		
		showAjaxButton();
	}
	
	
	/**
	 * hide success message
	 */
	this.hideSuccessMessage = function(){
		
		if(successMessageID){
			jQuery("#"+successMessageID).hide();
			successMessageID = null;	//can be used only once.
		}
		else
			jQuery("#success_message").slideUp("slow").fadeOut("slow");
		
		showAjaxButton();
	}
	
	
	/**
	 * set ajax loader id that will be shown, and hidden on ajax request
	 * this loader will be shown only once, and then need to be sent again.
	 */
	this.setAjaxLoaderID = function(id){
		ajaxLoaderID = id;
	}
	
	/**
	 * show loader on ajax actions
	 */
	var showAjaxLoader = function(){
		if(ajaxLoaderID)
			jQuery("#"+ajaxLoaderID).show();
	}
	
	/**
	 * hide and remove ajax loader. next time has to be set again before "ajaxRequest" function.
	 */
	var hideAjaxLoader = function(){
		if(ajaxLoaderID){
			jQuery("#"+ajaxLoaderID).hide();
			ajaxLoaderID = null;
		}
	}
	
	/**
	 * set button to hide / show on ajax operations.
	 */
	this.setAjaxHideButtonID = function(buttonID){
		ajaxHideButtonID = buttonID;
	}
	
	/**
	 * if exist ajax button to hide, hide it.
	 */
	var hideAjaxButton = function(){
		if(ajaxHideButtonID){
			var doHide = ajaxHideButtonID.split(',');
			if(doHide.length > 1){
				for(var i = 0; i < doHide.length; i++){
					jQuery("#"+doHide[i]).hide();
				}
			}else{
				jQuery("#"+ajaxHideButtonID).hide();
			}
		}
	}
	
	/**
	 * if exist ajax button, show it, and remove the button id.
	 */
	var showAjaxButton = function(){
		if(ajaxHideButtonID){
			var doShow = ajaxHideButtonID.split(',');
			if(doShow.length > 1){
				for(var i = 0; i < doShow.length; i++){
					jQuery("#"+doShow[i]).show();
				}
			}else{
				jQuery("#"+ajaxHideButtonID).show();
			}
			ajaxHideButtonID = null;
		}		
	}
	
	
	/**
	 * Ajax request function. call wp ajax, if error - print error message.
	 * if success, call "success function" 
	 */
	t.ajaxRequest = function(action,data,successFunction){
			
		var objData = {
			action:g_uniteDirPlagin+"_ajax_action",
			client_action:action,
			nonce:g_revNonce,
			data:data
		}
		
		hideErrorMessage();
		showAjaxLoader();
		hideAjaxButton();
		
		jQuery.ajax({
			type:"post",
			url:ajaxurl,
			dataType: 'json',
			data:objData,
			success:function(response){
				hideAjaxLoader();
				
				if(!response){
					t.showErrorMessage("Empty ajax response!");
					return(false);					
				}

				if(response == -1){
					t.showErrorMessage("ajax error!!!");
					return(false);
				}
				
				if(response == 0){
					t.showErrorMessage("ajax error, action: <b>"+action+"</b> not found");
					return(false);
				}
				
				if(response.success == undefined){
					t.showErrorMessage("The 'success' param is a must!");
					return(false);
				}
				
				if(response.success == false){
					t.showErrorMessage(response.message);
					return(false);
				}
				
				//success actions:

				//run a success event function
				if(typeof successFunction == "function")
					successFunction(response);
				else{
					if(response.message)
						showSuccessMessage(response.message);
				}
				
				if(response.is_redirect)
					location.href=response.redirect_url;
			
			},		 	
			error:function(jqXHR, textStatus, errorThrown){
				hideAjaxLoader();
				
				if(textStatus == "parsererror")
					t.debug(jqXHR.responseText);
				
				t.showErrorMessage("Ajax Error!!! " + textStatus);
			}
		});
		
	}//ajaxrequest
	
	
	/**
	 * open new add image dialog
	 */
	var openNewImageDialog = function(title,onInsert,isMultiple){
		
		if(isMultiple == undefined)
			isMultiple = false;
		
		// Media Library params
		var frame = wp.media({
			//frame:      'post',
            //state:      'insert',
			title : title,
			multiple : isMultiple,
			library : { type : 'image'},
			button : { text : 'Insert' }
		});

		// Runs on select
		frame.on('select',function(){
			var objSettings = frame.state().get('selection').first().toJSON();
			
			var selection = frame.state().get('selection');
			var arrImages = [];
			
			if(isMultiple == true){		//return image object when multiple
			    selection.map( function( attachment ) {
			    	var objImage = attachment.toJSON();
			    	var obj = {};
			    	obj.url = objImage.url;
			    	obj.id = objImage.id;
			    	arrImages.push(obj);
			    });
				onInsert(arrImages);
			}else{		//return image url and id - when single
				onInsert(objSettings.url,objSettings.id);
			}
			    
		});

		// Open ML
		frame.open();
	}
	
	
	/**
	 * open old add image dialog
	 */
	var openOldImageDialog = function(title,onInsert){
		var params = "type=image&post_id=0&TB_iframe=true";
		
		params = encodeURI(params);
		
		tb_show(title,'media-upload.php?'+params);
		
		window.send_to_editor = function(html) {
			 tb_remove();
			 var urlImage = jQuery(html).attr('src');
			 if(!urlImage || urlImage == undefined || urlImage == "")
				var urlImage = jQuery('img',html).attr('src');
			
			onInsert(urlImage,"");	//return empty id, it can be changed
		}
	}
	
	
	t.openAddImageDialog = function(title,onInsert,isMultiple){
		
		if(!title)
			title = 'Select Image';
		
		if(typeof wp != "undefined" && typeof wp.media != "undefined")
			openNewImageDialog(title,onInsert,isMultiple);
		else{
			openOldImageDialog(title,onInsert);
		}
		
	}
	
	
	/**
	 * load css file on the fly
	 * replace current item if exists
	 */
	t.loadCssFile = function(urlCssFile,replaceID){
		
		var rand = Math.floor((Math.random()*100000)+1);
		
		urlCssFile += "?rand="+rand;
		
		if(replaceID)
			jQuery("#"+replaceID).remove();
		
		jQuery("head").append("<link>");
		var css = jQuery("head").children(":last");
		css.attr({
		      rel:  "stylesheet",
		      type: "text/css",
		      href: urlCssFile
		});
		
		//replace current element
		if(replaceID)
			css.attr({id:replaceID});
	}
	
	
	/**
	 * get show image url
	 */
	t.getUrlShowImage = function(imageID,width,height,exact){
		
		imageID = parseInt(imageID, 0)
		
		var urlImage = g_urlAjaxShowImage+"&img="+imageID;
		
		if(width)
			urlImage += "&w="+width;
		
		if(height)
			urlImage += "&h="+height;
		
		if(exact && exact == true)
			urlImage += "&t=exact";
		
		return(urlImage);
	}
	
	
	/**
	 * set html to youtube dialog
	 * if empty data - clear the dialog
	 */
	var setYoutubeDialogHtml = function(data){
		
		//if empty data - clear the dialog
		if(!data){
			jQuery("#video_content").html("");
			return(false);
		}
		
		var thumb = data.thumb_medium;
		
		var useURL = (jQuery.trim(jQuery('#input_video_preview').val()) != '') ? jQuery('#input_video_preview').val() : thumb.url;
		
		var html = '<div class="video-content-title">'+data.title+'</div>';
		html += '<img id="video-thumbnail-preview" src="'+useURL+'" width="'+thumb.width+'" height="'+thumb.height+'" alt="thumbnail">';
		html += '<div class="video-content-description">';
		if(typeof data.desc_small != "undefined") html += data.desc_small;
		html += '</div>';
		
		jQuery("#video_content").html(html);
	}
	
	
	/**
	 * pass youtube id or youtube url, and get the id
	 */
	var getYoutubeIDFromUrl = function(url){
		url = jQuery.trim(url);
		
		var video_id = url.split('v=')[1];
		if(video_id){
			var ampersandPosition = video_id.indexOf('&');
			if(ampersandPosition != -1) {
			  video_id = video_id.substring(0, ampersandPosition);
			}
		}else{
			video_id = url;
		}
		
		return(video_id);
	}

	
	/**
	 * get vimeo id from url
	 */
	var getVimeoIDFromUrl = function(url){
		url = jQuery.trim(url);
		
		var video_id = url.replace(/[^0-9]+/g, '');
		video_id = jQuery.trim(video_id);
		
		return(video_id);
	}
	
	
	
	/**
	 * youtube callback script, set and store youtube data, and add it to dialog
	 */
	t.onYoutubeCallback = function(obj){
		jQuery("#youtube_loader").hide();
		var desc_small_size = 200;
		
		//prepare data
		var entry = obj.entry;
		var data = {};
		data.id = jQuery("#youtube_id").val();
		data.id = jQuery.trim(data.id);
		data.video_type = "youtube";
		data.title = entry.title.$t;
		data.author = entry.author[0].name.$t;
		data.link = entry.link[0].href;
		data.description = entry.media$group.media$description.$t;
		data.desc_small = data.description;
		
		if(data.description.length > desc_small_size)
			data.desc_small = data.description.slice(0,desc_small_size)+"...";
		
		var thumbnails = entry.media$group.media$thumbnail;
		
		data.thumb_small = {url:thumbnails[0].url,width:thumbnails[0].width,height:thumbnails[0].height};
		data.thumb_medium = {url:thumbnails[1].url,width:thumbnails[1].width,height:thumbnails[1].height};
		data.thumb_big = {url:thumbnails[2].url,width:thumbnails[2].width,height:thumbnails[2].height};
		
		//set html in dialog
		setYoutubeDialogHtml(data);
		
		//set the youtube arguments
		var objArguments = jQuery("#input_video_arguments");
		if(objArguments.val() == "")
			objArguments.val(objArguments.data("youtube"));
		
		//store last video data
		lastVideoData = data;
		
		//show controls:
		jQuery("#video_hidden_controls").show();
	}
	
	
	/**
	 * vimeo callback script, set and store vimeo data, and add it to dialog
	 */	
	t.onVimeoCallback = function(obj){
		jQuery("#vimeo_loader").hide();
		
		var desc_small_size = 200;
		obj = obj[0];
		
		var data = {};
		data.video_type = "vimeo";
		data.id = obj.id;
		data.id = jQuery.trim(data.id);
		data.title = obj.title;
		data.link = obj.url;
		data.author = obj.user_name;
		
		data.description = obj.description;
		if(data.description.length > desc_small_size)
			data.desc_small = data.description.slice(0,desc_small_size)+"...";
		
		data.thumb_large = {url:obj.thumbnail_large,width:640,height:360};
		data.thumb_medium = {url:obj.thumbnail_medium,width:200,height:150};
		data.thumb_small = {url:obj.thumbnail_small,width:100,height:75};
		
		//set html in dialog
		setYoutubeDialogHtml(data);
		
		//set the youtube arguments
		var objArguments = jQuery("#input_video_arguments");
		objArguments.val(objArguments.data("vimeo"));
		
		//store last video data
		lastVideoData = data;
		
		//show controls:
		jQuery("#video_hidden_controls").show();
	}

	
	/**
	 * show error message on the dialog
	 */
	t.videoDialogOnError = function(){
		//if ok, don't do nothing
		if(jQuery("#video_hidden_controls").is(":visible"))
			return(false);
		
		//if error - show message
		jQuery("#youtube_loader").hide();
		var html = "<div class='video-content-error'>Video Not Found!</div>";
		jQuery("#video_content").html(html);
	}
	
	
	/**
	 * update video size enabled disabled according fullwidth properties
	 */
	var updateVideoSizeProps = function(){
		var isFullwidth = jQuery("#input_video_fullwidth").is(":checked");
		if(isFullwidth == true){	//disable
			//jQuery("#video_size_wrapper").hide();
			jQuery("#input_video_width, #input_video_height, #input_video_height_lbl, #input_video_width_lbl").hide();
			
		}else{		//enable
			//jQuery("#video_size_wrapper").show();
			jQuery("#input_video_width, #input_video_height, #input_video_height_lbl, #input_video_width_lbl").show();
			jQuery("#input_video_cover").prop("checked",false);
		}
		
		var isCover = jQuery("#input_video_cover").is(":checked");
		if(isCover == true){	//disable
			jQuery("#input_video_ratio_lbl, #input_video_ratio, #input_video_dotted_overlay_lbl, #input_video_dotted_overlay").show();
		}else{		//enable
			jQuery("#input_video_ratio_lbl, #input_video_ratio, #input_video_dotted_overlay_lbl, #input_video_dotted_overlay").hide();
		}
	}
	
	/**
	 * open dialog for youtube or vimeo import , add / update
	 */
	t.openVideoDialog = function(callback,objCurrentVideoData){
		
		lastVideoCallback = callback;
		
		var dialogVideo = jQuery("#dialog_video");
		
		//set buttons:
		var buttons = {
			"Close":function(){
				dialogVideo.dialog("close");
			}
		};
		
		//clear the dialog content
		setYoutubeDialogHtml(false);
		
		//enable fields:
		jQuery("#video_type_chooser").show();
		jQuery("#youtube_id,#vimeo_id").prop("disabled","").removeClass("input-disabled");
		
		//clear the fields
		jQuery("#input_video_arguments").val("");
		jQuery("#input_video_autoplay").prop("checked","");
		jQuery("#showautoplayfirsttime").hide();
		jQuery("#input_video_autoplay_first_time").prop("checked","");
		jQuery("#input_video_nextslide").prop("checked","");
		jQuery("#input_video_force_rewind").prop("checked","");
		jQuery("#input_video_fullwidth").prop("checked","");
		jQuery("#input_video_control").prop("checked","");
		jQuery("#input_video_mute").prop("checked","");
		jQuery("#input_disable_on_mobile").prop("checked","");
		jQuery("#input_video_cover").prop("checked","");
		jQuery("#input_video_dotted_overlay option[value='none']").attr("selected",true);
		jQuery("#input_video_ratio option[value='16:9']").attr("selected",true);
		jQuery('#input_video_preload option[value="auto"]').attr("selected",true);
		jQuery('#input_video_speed option[value="1"]').attr("selected",true);
		jQuery('#input_video_loop option[value="none"]').attr("selected",true);
		jQuery("#input_video_preview").val("");
		jQuery("#input_use_poster_on_mobile").prop("checked","");
		
		
		jQuery("#youtube_id").val("");
		jQuery("#vimeo_id").val("");
		
		jQuery("#video_hidden_controls").hide();
		
		jQuery("#fullscreenvideofun").hide();
				
		var buttonVideoAdd = jQuery("#button-video-add");
		buttonVideoAdd.text(buttonVideoAdd.data("textadd"));
		
		//open the dialog
		dialogVideo.dialog({
				buttons:buttons,
				minWidth:830,
				minHeight:820,
				modal:true,
				dialogClass:"tpdialogs"
		});
		
		//if update dialog open:		
		if(objCurrentVideoData)
			setVideoDialogUpdateMode(objCurrentVideoData);
		
		updateVideoSizeProps();
	}
	
	
	/**
	 * prepare the dialog for video update
	 */
	var setVideoDialogUpdateMode = function(data){
		
		data.id = jQuery.trim(data.id);
		
		jQuery("#video_type_chooser").hide();
		
		//disable fields:
		//jQuery("#youtube_id,#vimeo_id").prop("disabled","disabled").addClass("input-disabled");
		
		//set mode and video id
		switch(data.video_type){
			case "youtube":
				jQuery("#video-dialog-wrap").removeClass("html5select");
				jQuery("#video_radio_youtube").trigger("click");			
				jQuery("#youtube_id").val(data.id);	
				jQuery("#fullscreenvideofun").hide();				
			break;
			case "vimeo":
				jQuery("#video-dialog-wrap").removeClass("html5select");
				jQuery("#video_radio_vimeo").trigger("click");
				jQuery("#vimeo_id").val(data.id);
				jQuery("#fullscreenvideofun").hide();				
			break;
			case "html5":
				jQuery("#video-dialog-wrap").addClass("html5select");
				jQuery("#html5_url_poster").val(data.urlPoster);
				jQuery("#html5_url_mp4").val(data.urlMp4);
				jQuery("#html5_url_webm").val(data.urlWebm);
				jQuery("#html5_url_ogv").val(data.urlOgv);
				jQuery("#video_radio_html5").trigger("click");
				jQuery("#fullscreenvideofun").show();				
			break;
		}
		
		//set width and height:
		jQuery("#input_video_width").val(data.width);
		jQuery("#input_video_height").val(data.height);
		jQuery("#input_video_arguments").val(data.args);
		
		jQuery("#input_video_preview").val(data.previewimage);
		
		if(data.autoplay && data.autoplay == true){
			jQuery("#input_video_autoplay").prop("checked","checked");
			jQuery("#showautoplayfirsttime").show();
		}else{
			jQuery("#input_video_autoplay").prop("checked","");
			jQuery("#showautoplayfirsttime").hide();
		}
		
		if(data.use_poster_on_mobile && data.use_poster_on_mobile == true){
			jQuery("#input_use_poster_on_mobile").prop("checked","checked");
		}else{
			jQuery("#input_use_poster_on_mobile").prop("checked","");
		}
		
		if(data.autoplayonlyfirsttime && data.autoplayonlyfirsttime == true)
			jQuery("#input_video_autoplay_first_time").prop("checked","checked");
		else
			jQuery("#input_video_autoplay_first_time").prop("checked","");
			
		if(data.nextslide && data.nextslide == true)
			jQuery("#input_video_nextslide").prop("checked","checked");
		else
			jQuery("#input_video_nextslide").prop("checked","");
	
		if(data.forcerewind && data.forcerewind == true)
			jQuery("#input_video_force_rewind").prop("checked","checked");
		else
			jQuery("#input_video_force_rewind").prop("checked","");

		if(data.fullwidth && data.fullwidth == true)
			jQuery("#input_video_fullwidth").prop("checked","checked");
		else
			jQuery("#input_video_fullwidth").prop("checked","");
		
		if(data.controls && data.controls == true)
			jQuery("#input_video_control").prop("checked","checked");
		else
			jQuery("#input_video_control").prop("checked","");
			
		if(data.mute && data.mute == true)
			jQuery("#input_video_mute").prop("checked","checked");
		else
			jQuery("#input_video_mute").prop("checked","");
		
		if(data.disable_on_mobile && data.disable_on_mobile == true)
			jQuery("#input_disable_on_mobile").prop("checked","checked");
		else
			jQuery("#input_disable_on_mobile").prop("checked","");
			
		if(data.cover && data.cover == true)
			jQuery("#input_video_cover").prop("checked","checked");
		else
			jQuery("#input_video_cover").prop("checked","");
		
		if(data.preload){
			jQuery("#input_video_preload option").each(function(){
				if(jQuery(this).val() == data.preload)
					jQuery(this).attr('selected', true);
			});
		}
		
		if(data.videospeed){
			jQuery("#input_video_speed option").each(function(){
				if(jQuery(this).val() == data.videospeed)
					jQuery(this).attr('selected', true);
			});
		}
		
		if(data.dotted){
			jQuery("#input_video_dotted_overlay option").each(function(){
				if(jQuery(this).val() == data.dotted)
					jQuery(this).attr('selected', true);
			});
		}
		if(data.ratio){
			jQuery("#input_video_ratio option").each(function(){
				if(jQuery(this).val() == data.ratio)
					jQuery(this).attr('selected', true);
			});
		}
		
		if(data.videoloop){
			if(data.videoloop == true){
				jQuery('#input_video_loop option[value="loop"]').attr("selected",true);
			}else{
				jQuery("#input_video_loop option").each(function(){
					if(jQuery(this).val() == data.videoloop)
						jQuery(this).attr('selected', true);
				});
			}
		}
		
		//change button text:
		var buttonVideoAdd = jQuery("#button-video-add");
		buttonVideoAdd.text(buttonVideoAdd.data("textupdate"));
		
		//search
		switch(data.video_type){
			case "youtube":
				jQuery("#button_youtube_search").trigger("click");
			break;
			case "vimeo":
				jQuery("#button_vimeo_search").trigger("click");
			break;
		}
		
		//if(data.previewimage != '') jQuery("#video-thumbnail-preview").attr('src', data.previewimage);
	}
	
	//add params from textboxes to object
	var addTextboxParamsToObj = function(obj){
		obj.width = jQuery("#input_video_width").val();
		obj.height = jQuery("#input_video_height").val();
		obj.args = jQuery("#input_video_arguments").val();
		obj.previewimage = jQuery("#input_video_preview").val();
		obj.autoplay = jQuery("#input_video_autoplay").is(":checked");
		obj.use_poster_on_mobile = jQuery("#input_use_poster_on_mobile").is(":checked");
		obj.autoplayonlyfirsttime = jQuery("#input_video_autoplay_first_time").is(":checked");
		obj.nextslide = jQuery("#input_video_nextslide").is(":checked");
		obj.forcerewind = jQuery("#input_video_force_rewind").is(":checked");
		obj.fullwidth = jQuery("#input_video_fullwidth").is(":checked");
		obj.controls = jQuery("#input_video_control").is(":checked");
		obj.mute = jQuery("#input_video_mute").is(":checked");
		obj.disable_on_mobile = jQuery("#input_disable_on_mobile").is(":checked");
		obj.cover = jQuery("#input_video_cover").is(":checked");
		obj.dotted = jQuery("#input_video_dotted_overlay option:selected").val();
		obj.preload = jQuery("#input_video_preload option:selected").val();
		obj.videospeed = jQuery("#input_video_speed option:selected").val();
		obj.ratio = jQuery("#input_video_ratio option:selected").val();
		obj.videoloop = jQuery("#input_video_loop option:selected").val();
		return(obj);
	}
	
	
	/**
	 * init video dialog buttons
	 */
	var initVideoDialog = function(){
		
		//set youtube radio checked:
		jQuery("#video_radio_youtube").prop("checked",true);
		
		//set radio boxes:
		jQuery("#video_radio_vimeo").click(function(){
			jQuery("#video_block_youtube").hide();
			jQuery("#video_block_html5").hide();
			jQuery("#rev-html5-options").hide();
			jQuery("#rev-youtube-options").hide();
			jQuery("#video_hidden_controls").hide();
			jQuery("#rev-video-loop-wrap").hide();
			//jQuery("#video_content").show();
			jQuery("#video_block_vimeo").show();
			jQuery("#preview-image-video-wrap").show();
			jQuery("#video-dialog-wrap").removeClass("html5select");
			jQuery("#fullscreenvideofun").hide();
		});
		
		jQuery("#video_radio_youtube").click(function(){
			jQuery("#video_block_vimeo").hide();
			jQuery("#video_block_html5").hide();			
			jQuery("#rev-html5-options").hide();			
			jQuery("#rev-youtube-options").show();			
			jQuery("#video_hidden_controls").hide();
			jQuery("#rev-video-loop-wrap").hide();
			//jQuery("#video_content").show();
			jQuery("#video_block_youtube").show();
			jQuery("#preview-image-video-wrap").show();
			jQuery("#video-dialog-wrap").removeClass("html5select");
			jQuery("#fullscreenvideofun").hide();
		});
		
		jQuery("#video_radio_html5").click(function(){
			jQuery("#video_block_vimeo").hide();
			jQuery("#video_block_youtube").hide();
			jQuery("#video_block_html5").show();
			jQuery("#rev-youtube-options").hide();
			jQuery("#rev-html5-options").show();
			jQuery("#video_content").hide();
			jQuery("#video_hidden_controls").show();
			jQuery("#rev-video-loop-wrap").show();
			jQuery("#preview-image-video-wrap").hide();
			jQuery("#video-dialog-wrap").addClass("html5select");
			jQuery("#fullscreenvideofun").show();	
		});
		
		
		jQuery("#input_video_autoplay").click(function(){
			if(jQuery(this).is(":checked")){
				jQuery("#showautoplayfirsttime").show();
			}else{
				jQuery("#showautoplayfirsttime").hide();
			}
		});
		
		jQuery("#input_video_cover").click(function(){
			if(jQuery(this).is(":checked")){
				if(!jQuery('#input_video_fullwidth').is(":checked")) jQuery('#input_video_fullwidth').prop("checked",true);
			}
			updateVideoSizeProps();
		});
		
		//set youtube search action
		jQuery("#button_youtube_search").click(function(){
			
			//init data
			setYoutubeDialogHtml(false);
			jQuery("#video_hidden_controls").hide();
			
			jQuery("#youtube_loader").show();
			var youtubeID = jQuery("#youtube_id").val();
			youtubeID = jQuery.trim(youtubeID);
			
			youtubeID = getYoutubeIDFromUrl(youtubeID);
			
			var urlAPI = "https://gdata.youtube.com/feeds/api/videos/"+youtubeID+"?v=2&alt=json-in-script&callback=UniteAdminRev.onYoutubeCallback";
			
			jQuery.getScript(urlAPI);
			
			jQuery("#video_content").show();
			
			//handle not found:
			setTimeout("UniteAdminRev.videoDialogOnError()",2000);
		});
		
		
		//add the selected video to the callback function
		jQuery("#button-video-add").click(function(){
			var html5Checked = jQuery("#video_radio_html5").prop("checked");
			
			jQuery("#video_content").hide();
			
			if(html5Checked){	//in case of html5
				var obj = {};
				obj.video_type = "html5";
				obj.urlPoster = jQuery("#html5_url_poster").val();
				obj.urlMp4 = jQuery("#html5_url_mp4").val();
				obj.urlWebm = jQuery("#html5_url_webm").val();
				obj.urlOgv = jQuery("#html5_url_ogv").val();
				obj.width = jQuery("#input_video_width").val();
				obj.height = jQuery("#input_video_height").val();

				obj = addTextboxParamsToObj(obj);
				
				if(typeof lastVideoCallback == "function")
					lastVideoCallback(obj);
				
				jQuery("#dialog_video").dialog("close");
				
			}else{		//in case of vimeo and youtube 
				if(!lastVideoData)
					return(false);
				
				lastVideoData = addTextboxParamsToObj(lastVideoData);
				
				if(typeof lastVideoCallback == "function")
					lastVideoCallback(lastVideoData);
				
				jQuery("#dialog_video").dialog("close");
			}
			
		});
		
		
		//set vimeo search
		jQuery("#button_vimeo_search").click(function(){
			//init data
			setYoutubeDialogHtml(false);
			jQuery("#video_hidden_controls").hide();
			
			jQuery("#vimeo_loader").show();
			
			jQuery("#video_content").show();
			
			var vimeoID = jQuery("#vimeo_id").val();
			vimeoID = jQuery.trim(vimeoID);
			vimeoID = getVimeoIDFromUrl(vimeoID);
			
			var urlAPI = '//www.vimeo.com/api/v2/video/' + vimeoID + '.json?callback=UniteAdminRev.onVimeoCallback'; 
			jQuery.getScript(urlAPI);
		});
		
		
		jQuery("#input_video_fullwidth").click(updateVideoSizeProps);
		
	}//end initVideoDialog
	
	
	/**
	 * init general settings dialog
	 */
	var initGeneralSettings = function(){
		
		//button general settings - open dialog
		jQuery("#button_general_settings").click(function(){
			
			jQuery("#loader_general_settings").hide();
			
			jQuery("#dialog_general_settings").dialog({
				minWidth:800,
				minHeight:500,
				modal:true,
				dialogClass:"tpdialogs"
			});
			
		});
		
		//button save general settings
		jQuery("#button_save_general_settings").click(function(){
			var data = UniteSettingsRev.getSettingsObject("form_general_settings");
			jQuery("#loader_general_settings").show();
			UniteAdminRev.ajaxRequest("update_general_settings",data,function(response){
				jQuery("#loader_general_settings").hide();
				jQuery("#dialog_general_settings").dialog("close");
			});
		});
		
		
	}
	
	
	//adds the update/deactivate option
	var initUpdateRoutine = function(){
		
		jQuery('#rs-validation-activate').click(function(){
			
			UniteAdminRev.setAjaxLoaderID("rs_purchase_validation");
			UniteAdminRev.setAjaxHideButtonID("rs-validation-activate");
			
			var data = {
				code: jQuery('input[name="rs-validation-token"]').val(),
				username: jQuery('input[name="rs-validation-username"]').val(),
				api_key: jQuery('input[name="rs-validation-api-key"]').val()
			}
			
			UniteAdminRev.ajaxRequest("activate_purchase_code",data);
		});
		
		jQuery('#rs-validation-deactivate').click(function(){
			
			UniteAdminRev.setAjaxLoaderID("rs_purchase_validation");
			UniteAdminRev.setAjaxHideButtonID("rs-validation-deactivate");
			
			UniteAdminRev.ajaxRequest("deactivate_purchase_code",'');
			
		});
		
	}
	
	
	//run the init function
	jQuery(document).ready(function(){
		initVideoDialog();
		
		//init update dialog:
		jQuery("#button_upload_plugin").click(function(){
			
			jQuery("#dialog_update_plugin").dialog({
				minWidth:600,
				minHeight:400,
				modal:true,
				dialogClass:"tpdialogs"
			});
			
		});
		
		//update text operation
		jQuery("#button_update_text").click(function(){
			UniteAdminRev.ajaxRequest("update_text","",function(response){
				alert(response.message);
			});
		});
		
		initGeneralSettings();
		
		initSliderMultipleText();
		
		initUpdateRoutine();
		
	});
	
	/**
	 * set multiple key values
	 */
	t.setMultipleTextKey = function(name, key){
		g_multiple_text_key[name] = key;
	}
	
	/**
	 * set multiple key values
	 */
	t.getMultipleTextKey = function(name){
		return g_multiple_text_key[name];
	}
	
	var initSliderMultipleText = function(){
	
		jQuery("body").on("click",".remove_multiple_text",function(){ //remove element
			jQuery("#"+jQuery(this).data('remove')).remove();
			jQuery(this).parent().remove();
		});
		
		jQuery(".multiple_text_add").click(function(){ //add element
			
			var handle = jQuery(this).data('name');
			var key = t.getMultipleTextKey(handle) + 1;
			var template = jQuery('.'+handle+'_TEMPLATE').html();
			
			template = template.replace(/##ID##/ig, handle+'_'+key).replace(/##NAME##/ig, handle);
			jQuery('#'+handle+'_row .setting_input').append(template);
			
			t.setMultipleTextKey(handle, key);
		});
		
	}
	
	/**
	 * set multiple key values
	 */
	t.parseCssMultiAttribute = function(value){
		if(value == '') return false;
		var raw = value.split(' ');
		var retObj = [];
		
		switch(raw.length){
			case 1:
				retObj[0] = raw[0];
				retObj[1] = raw[0];
				retObj[2] = raw[0];
				retObj[3] = raw[0];
			break;
			case 2:
				retObj[0] = raw[0];
				retObj[1] = raw[1];
				retObj[2] = raw[0];
				retObj[3] = raw[1];
			break;
			case 3:
				retObj[0] = raw[0];
				retObj[1] = raw[1];
				retObj[2] = raw[2];
				retObj[3] = raw[1];
			break;
			case 4:
				retObj[0] = raw[0];
				retObj[1] = raw[1];
				retObj[2] = raw[2];
				retObj[3] = raw[3];
			break;
			case 0:
			default:
			return false;
			break;
		}
		
		return retObj;
	}
	
	/**
	 * get rgb from hex values
	 */
	t.convertHexToRGB = function(hex) {
		var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
		return [hex >> 16,(hex & 0x00FF00) >> 8,(hex & 0x0000FF)];
	}
	
	
	t.initGoogleFonts = function(){
		
		jQuery('#eg-font-add').click(function(){
			jQuery('#font-dialog-wrap').dialog({
				modal:true,
				draggable:false,
				resizable:false,
				width:470,
				height:320,
				closeOnEscape:true,
				dialogClass:'wp-dialog',
				buttons: [ { text: 'Add Font', click: function() {
					var data = {};
					
					data.handle = t.sanitize_input(jQuery('input[name="eg-font-handle"]').val());
					data['url'] = jQuery('input[name="eg-font-url"]').val();
					
					if(data.handle.length < 3 || data.url.length < 3){
						alert('Handle has to be at least three character long');
						return false;
					}
					
					UniteAdminRev.ajaxRequest("add_google_fonts", data, function(response){}); //'#eg-font-add',
					
				} } ],
			});
		});
		
		
		jQuery('body').on('click', '.eg-font-edit', function(){
			if(confirm('Really change font settings?')){
				var data = {};
				var el = jQuery(this);
				data.handle = el.closest('.inside').find('input[name="esg-font-handle[]"]').val();
				data['url'] = el.closest('.inside').find('input[name="esg-font-url[]"]').val();
				
				UniteAdminRev.ajaxRequest("edit_google_fonts", data, function(response){}); //'#eg-font-add, .eg-font-edit, .eg-font-delete',
			}
			
		});
		
		
		jQuery('body').on('click', '.eg-font-delete', function(){
			if(confirm('Really delete font?')){
				var data = {};
				var el = jQuery(this);
				
				data.handle = el.closest('.inside').find('input[name="esg-font-handle[]"]').val();
				
				UniteAdminRev.ajaxRequest("remove_google_fonts", data, function(response){ //'#eg-font-add, .eg-font-edit, .eg-font-delete',
					if(response.success == true){
						el.closest('.postbox.eg-postbox').remove();
					}
				});
			}
		});
		
	}
	
	t.sanitize_input = function(raw){
		return raw.toLowerCase().replace(/ /g, '-').replace(/[^-0-9a-z]/g,'');
	}
	
	t.initAccordion = function(){
		jQuery(".postbox-arrow").each(function(i) {

			jQuery(this).closest('h3').click(function(){
				var handle = jQuery(this);

				//open
				if(!handle.hasClass("box-closed")){
					handle.closest('.postbox').find('.inside').slideUp("fast");
					handle.addClass("box-closed");

				}else{	//close
					jQuery('.postbox-arrow').each(function() {
						var handle = jQuery(this).closest('h3');
						handle.closest('.postbox').find('.inside').slideUp("fast");
						handle.addClass("box-closed");
					})
					handle.closest('.postbox').find('.inside').slideDown("fast");
					handle.removeClass("box-closed");

				}
			});

		});
	}
}


//user functions:

function trace(data,clear){
	UniteAdminRev.trace(data,clear);
}

function debug(data){
	UniteAdminRev.debug(data);
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <?php
	class UniteSettingsProductSidebarRev extends UniteSettingsOutputRev{
		
		private $addClass = "";		//add class to the main div
		private $arrButtons = array();
		private $isAccordion = true;
		private $defaultTextClass;
		
		const INPUT_CLASS_SHORT = "text-sidebar";
		const INPUT_CLASS_NORMAL = "text-sidebar-normal";
		const INPUT_CLASS_LONG = "text-sidebar-long";
		const INPUT_CLASS_LINK = "text-sidebar-link";
		

		/**
		 * 
		 * construction
		 */
		public function __construct(){
			$this->defaultTextClass = self::INPUT_CLASS_SHORT;
		}
		
		
		/**
		 * 
		 * set default text class
		 */
		public function setDefaultInputClass($defaultClass){
			$this->defaultTextClass = $defaultClass;
		}
		
		
		/**
		 * 
		 * add buggon
		 */
		public function addButton($title,$id,$class = "button-secondary"){
			
			$button = array(
				"title"=>$title,
				"id"=>$id,
				"class"=>$class
			);
			
			$this->arrButtons[] = $button;			
		}
		
		
		
		/**
		 * 
		 * set add class for the main div
		 */
		public function setAddClass($addClass){
			$this->addClass = $addClass;
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//draw text as input
		protected function drawTextInput($setting) {
			$disabled = "";
			$style="";
			if(isset($setting["style"])) 
				$style = "style='".$setting["style"]."'";
			if(isset($setting["disabled"])) 
				$disabled = 'disabled="disabled"';

			$class = UniteFunctionsRev::getVal($setting, "class",$this->defaultTextClass);
							
			//modify class:
			switch($class){
				case "normal":
				case "regular":
					$class = self::INPUT_CLASS_NORMAL;
				break;
				case "long":
					$class = self::INPUT_CLASS_LONG;
				break;
				case "link":
					$class = self::INPUT_CLASS_LINK;
				break;
			}
			
			if(!empty($class))
				$class = "class='$class'";
			
			$attribs = UniteFunctionsRev::getVal($setting, "attribs");
			
			?>
				<input type="text" <?php echo $attribs?> <?php echo $class?> <?php echo $style?> <?php echo $disabled?> id="<?php echo $setting["id"]?>" name="<?php echo $setting["name"]?>" value="<?php echo $setting["value"]?>" />
			<?php
		}
		
		//-----------------------------------------------------------------------------------------------
		//draw multiple text boxes as input
		protected function drawMultipleText($setting) {
			$disabled = "";
			$style="";
			if(isset($setting["style"])) 
				$style = "style='".$setting["style"]."'";
			if(isset($setting["disabled"])) 
				$disabled = 'disabled="disabled"';

			$class = UniteFunctionsRev::getVal($setting, "class",$this->defaultTextClass);
							
			//modify class:
			switch($class){
				case "normal":
				case "regular":
					$class = self::INPUT_CLASS_NORMAL;
				break;
				case "long":
					$class = self::INPUT_CLASS_LONG;
				break;
				case "link":
					$class = self::INPUT_CLASS_LINK;
				break;
			}
			
			if(!empty($class))
				$class = "class='$class'";
			
			$attribs = UniteFunctionsRev::getVal($setting, "attribs");
			$values = $setting["value"];
			if(!empty($values) && is_array($values)){
				foreach($values as $key => $value){
				?>
					<div class="fontinput_wrapper">
					<input type="text" <?php echo $attribs?> <?php echo $class?> <?php echo $style?> <?php echo $disabled?> id="<?php echo $setting["id"].'_'.$key?>" name="<?php echo $setting["name"]?>[]" value="<?php echo stripslashes($value)?>" /> <a href="javascript:void(0);" data-remove="<?php echo $setting["id"].'_'.$key?>" class="remove_multiple_text"><i class="revicon-trash redicon withhover"></i></a>
					</div>
				<?php
				}
			}else{ //fallback to old version
				$key = 0;
			?>
				<div class="fontinput_wrapper">
				<input type="text" <?php echo $attribs?> <?php echo $class?> <?php echo $style?> <?php echo $disabled?> id="<?php echo $setting["id"].'_'.$key?>" name="<?php echo $setting["name"]?>[]" value="<?php echo stripslashes($setting["value"])?>" /> <a href="javascript:void(0);" data-remove="<?php echo $setting["id"].'_'.$key?>" class="remove_multiple_text"><i class="revicon-trash redicon withhover"></i></a>
				</div>
			<?php
			}
			?>
			
			<div class="<?php echo $setting["id"]?>_TEMPLATE" style="display: none;">
				<div class="fontinput_wrapper">
					<input type="text" <?php echo $attribs?> <?php echo $class?> <?php echo $style?> id="##ID##" name="##NAME##[]" value="" /> <a href="javascript:void(0);" data-remove="##ID##" class="remove_multiple_text"><i class="revicon-trash redicon withhover"></i></a>
				</div>
			</div>
			
			<script type="text/javascript">
				UniteAdminRev.setMultipleTextKey('<?php echo $setting["id"]?>', <?php echo $key?>);
			</script>
			<?php
		}
		
		//-----------------------------------------------------------------------------------------------
		//draw a color picker
		protected function drawColorPickerInput($setting){			
			$bgcolor = $setting["value"];
			$bgcolor = str_replace("0x","#",$bgcolor);			
			// set the forent color (by black and white value)
			$rgb = UniteFunctionsRev::html2rgb($bgcolor);
			$bw = UniteFunctionsRev::yiq($rgb[0],$rgb[1],$rgb[2]);
			$color = "#000000";
			if($bw<128) $color = "#ffffff";
			
			
			$disabled = "";
			if(isset($setting["disabled"])){
				$color = "";
				$disabled = 'disabled="disabled"';
			}
			
			$style="style='background-color:$bgcolor;color:$color'";
			
			?>
				<input type="text" class="inputColorPicker" id="<?php echo $setting["id"]?>" <?php echo $style?> name="<?php echo $setting["name"]?>" value="<?php echo $bgcolor?>" <?php echo $disabled?>></input>
			<?php
		}
		
		//-----------------------------------------------------------------------------------------------
		//draw a color picker
		protected function drawCodeMirror($setting){			
			?>
			<textarea name="<?php echo $setting['name']; ?>" id="<?php echo $setting['id']; ?>"><?php echo $setting["value"]; ?></textarea>
			<script type="text/javascript">
				rev_cm_<?php echo $setting['id']; ?> = null;
				jQuery(document).ready(function(){
					rev_cm_<?php echo $setting['id']; ?> = CodeMirror.fromTextArea(document.getElementById("<?php echo $setting['id']; ?>"), {
						onChange: function(){ },
						lineNumbers: true
					});
					
					jQuery('.postbox.unite-postbox').click(function(){
						rev_cm_<?php echo $setting['id']; ?>.refresh();
					});
				});
			</script>
			<?php
		}
		
		//-----------------------------------------------------------------------------------------------
		// draw setting input by type
		protected function drawInputs($setting){
			switch($setting["type"]){
				case UniteSettingsRev::TYPE_TEXT:
					$this->drawTextInput($setting);
				break;
				case UniteSettingsRev::TYPE_COLOR:
					$this->drawColorPickerInput($setting);
				break;
				case UniteSettingsRev::TYPE_SELECT:
					$this->drawSelectInput($setting);
				break;
				case UniteSettingsRev::TYPE_CHECKBOX:
					$this->drawCheckboxInput($setting);
				break;
				case UniteSettingsRev::TYPE_RADIO:
					$this->drawRadioInput($setting);
				break;
				case UniteSettingsRev::TYPE_TEXTAREA:
					$this->drawTextAreaInput($setting);
				break;
				case UniteSettingsRev::TYPE_CUSTOM:
					$this->drawCustom($setting);
				break;
				case UniteSettingsRev::TYPE_BUTTON:
					$this->drawButtonSetting($setting);
				break;
				case UniteSettingsRev::TYPE_MULTIPLE_TEXT:
					$this->drawMultipleText($setting);
				break;
				case 'codemirror':
					$this->drawCodeMirror($setting);
				break;
				default:
					throw new Exception("wrong setting type - ".$setting["type"]);
				break;
			}			
		}		
		
		//-----------------------------------------------------------------------------------------------
		//draw advanced order box
		protected function drawOrderbox_advanced($setting){
			
			$items = $setting["items"];
			if(!is_array($items))
				$this->throwError("Orderbox error - the items option must be array (items)");
				
			//get arrItems modify items by saved value			
			
			if(!empty($setting["value"]) && 
				getType($setting["value"]) == "array" &&
				count($setting["value"]) == count($items)):
				
				$savedItems = $setting["value"];
				
				//make assoc array by id:
				$arrAssoc = array();
				foreach($items as $item)
					$arrAssoc[$item[0]] = $item[1];
				
				foreach($savedItems as $item){
					$value = $item["id"];
					$text = $value;
					if(isset($arrAssoc[$value]))
						$text = $arrAssoc[$value];
					$arrItems[] = array($value,$text,$item["enabled"]);
				}
			else: 
				$arrItems = $items;
			endif;
			
			?>	
			<ul class="orderbox_advanced" id="<?php echo $setting["id"]?>">
			<?php 
			foreach($arrItems as $arrItem){
				switch(getType($arrItem)){
					case "string":
						$value = $arrItem;
						$text = $arrItem;
						$enabled = true;
					break;
					case "array":
						$value = $arrItem[0];
						$text = (count($arrItem)>1)?$arrItem[1]:$arrItem[0];
						$enabled = (count($arrItem)>2)?$arrItem[2]:true;
					break;
					default:
						$this->throwError("Error in setting:".$setting.". unknown item type.");
					break;
				}
				$checkboxClass = $enabled ? "div_checkbox_on" : "div_checkbox_off";
				
					?>
						<li>
							<div class="div_value"><?php echo $value?></div>
							<div class="div_checkbox <?php echo $checkboxClass?>"></div>
							<div class="div_text"><?php echo $text?></div>
							<div class="div_handle"></div>
						</li>
					<?php 
			}
			
			?>
			</ul>
			<?php 			
		}
		
		//-----------------------------------------------------------------------------------------------
		//draw order box
		protected function drawOrderbox($setting){
						
			$items = $setting["items"];
			
			//get arrItems by saved value
			$arrItems = array();
					
			if(!empty($setting["value"]) && 
				getType($setting["value"]) == "array" &&
				count($setting["value"]) == count($items)){
				
				$savedItems = $setting["value"];
								
				foreach($savedItems as $value){
					$text = $value;
					if(isset($items[$value]))
						$text = $items[$value];
					$arrItems[] = array("value"=>$value,"text"=>$text);	
				}
			}		//get arrItems only from original items
			else{
				foreach($items as $value=>$text)
					$arrItems[] = array("value"=>$value,"text"=>$text);
			}
			
			
			?>
			<ul class="orderbox" id="<?php echo $setting["id"]?>">
			<?php 
				foreach($arrItems as $item){
					$itemKey = $item["value"];
					$itemText = $item["text"];
					
					$value = (getType($itemKey) == "string")?$itemKey:$itemText;
					?>
						<li>
							<div class="div_value"><?php echo $value?></div>
							<div class="div_text"><?php echo $itemText?></div>
						</li>
					<?php 
				} 
			?>
			</ul>
			<?php 
		}
		
		/**
		 * 
		 * draw button
		 */
		function drawButtonSetting($setting){
			//set class
			$class = UniteFunctionsRev::getVal($setting, "class");
			if(!empty($class))
				$class = "class='$class'";
			
			?>
				<input type="button" id="<?php echo $setting["id"]?>" value="<?php echo $setting["value"]?>" <?php echo $class?>>
			<?php 
		}
		
		
		//-----------------------------------------------------------------------------------------------
		// draw text area input
		protected function drawTextAreaInput($setting){
			$disabled = "";
			if (isset($setting["disabled"])) $disabled = 'disabled="disabled"';
			
			//set style
			$style = UniteFunctionsRev::getVal($setting, "style");	
			if(!empty($style)) 
				$style = "style='".$style."'";

			//set class
			$class = UniteFunctionsRev::getVal($setting, "class");
			if(!empty($class))
				$class = "class='$class'";
			
			?>
				<textarea id="<?php echo $setting["id"]?>" <?php echo $class?> name="<?php echo $setting["name"]?>" <?php echo $style?> <?php echo $disabled?>><?php echo $setting["value"]?></textarea>				
			<?php
		}		
		
		//-----------------------------------------------------------------------------------------------
		// draw radio input
		protected function drawRadioInput($setting){
			$items = $setting["items"];
			$counter = 0;
			$id = $setting["id"];
			$isDisabled = UniteFunctionsRev::getVal($setting, "disabled",false); 
			
			?>
			<span id="<?php echo $id?>" class="radio_wrapper">
			<?php 
			foreach($items as $value=>$text):
				$counter++;
				$radioID = $id."_".$counter;
				$checked = "";
				if($value == $setting["value"]) $checked = " checked";

				$disabled = "";
				if($isDisabled == true)
					$disabled = 'disabled="disabled"';
				
				?>
					<div class="radio_inner_wrapper">
						<input type="radio" id="<?php echo $radioID?>" value="<?php echo $value?>" name="<?php echo $setting["name"]?>" <?php echo $disabled?> <?php echo $checked?>/>
						<label for="<?php echo $radioID?>" style="cursor:pointer;"><?php _e($text)?></label>
					</div>
				<?php				
			endforeach;
			?>
			</span>
			<?php 
		}
		
		
		//-----------------------------------------------------------------------------------------------
		// draw checkbox
		protected function drawCheckboxInput($setting){
			$checked = "";
			if($setting["value"] == true) $checked = 'checked="checked"';
			?>
				<input type="checkbox" id="<?php echo $setting["id"]?>" class="inputCheckbox" name="<?php echo $setting["name"]?>" <?php echo $checked?>/>
			<?php
		}		
		
		//-----------------------------------------------------------------------------------------------
		//draw select input
		protected function drawSelectInput($setting){
			
			$className = "";
			if(isset($this->arrControls[$setting["name"]])) $className = "control";
			$class = "";
			if($className != "") $class = "class='".$className."'";
			
			$disabled = "";
			if(isset($setting["disabled"])) 
				$disabled = 'disabled="disabled"';
			
			?>
			<select id="<?php echo $setting["id"]?>" name="<?php echo $setting["name"]?>" <?php echo $disabled?> <?php echo $class?>>
			<?php
			foreach($setting["items"] as $value=>$text):
				$text = __($text,REVSLIDER_TEXTDOMAIN);
				$selected = "";
				if($value == $setting["value"]) $selected = 'selected="selected"';
				?>
					<option value="<?php echo $value?>" <?php echo $selected?>><?php echo $text?></option>
				<?php
			endforeach
			?>
			</select>
			<?php
		}

		/**
		 * 
		 * draw custom setting
		 */
		protected function drawCustom($setting){
			dmp($setting);
			exit();
		}
		
		//-----------------------------------------------------------------------------------------------
		//draw hr row
		protected function drawTextRow($setting){
			
			//set cell style
			$cellStyle = "";
			if(isset($setting["padding"])) 
				$cellStyle .= "padding-left:".$setting["padding"].";";
				
			if(!empty($cellStyle))
				$cellStyle="style='$cellStyle'";
				
			//set style
			$rowStyle = "";					
			if(isset($setting["hidden"]) && $setting["hidden"] == true) 
				$rowStyle .= "display:none;";
				
			if(!empty($rowStyle))
				$rowStyle = "style='$rowStyle'";
			
			?>
				<span class="spanSettingsStaticText"><?php echo __($setting["text"],REVSLIDER_TEXTDOMAIN)?></span>
			<?php 
		}
		
		//-----------------------------------------------------------------------------------------------
		//draw hr row
		protected function drawHrRow($setting){
			//set hidden
			$rowStyle = "";
			if(isset($setting["hidden"]) && $setting["hidden"] == true) $rowStyle = "style='display:none;'";
			
			?>
				<li id="<?php echo $setting["id"]?>_row" class="hrrow">
					<hr />
				</li>
			<?php 
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//draw settings row
		protected function drawSettingRow($setting){
		
			//set cellstyle:
			$cellStyle = "";
			if(isset($setting[UniteSettingsRev::PARAM_CELLSTYLE])){
				$cellStyle .= $setting[UniteSettingsRev::PARAM_CELLSTYLE];
			}
			
			//set text style:
			$textStyle = $cellStyle;
			if(isset($setting[UniteSettingsRev::PARAM_TEXTSTYLE])){
				$textStyle .= $setting[UniteSettingsRev::PARAM_TEXTSTYLE];
			}
			
			if($textStyle != "") $textStyle = "style='".$textStyle."'";
			if($cellStyle != "") $cellStyle = "style='".$cellStyle."'";
			
			//set hidden
			$rowStyle = "";
			if(isset($setting["hidden"]) && $setting["hidden"] == true) $rowStyle = "display:none;";
			if(!empty($rowStyle)) $rowStyle = "style='$rowStyle'";
			
			//set row class:
			$rowClass = "";
			if(isset($setting["disabled"])) $rowClass = "class='disabled'";

			
			//modify text:
			$text = UniteFunctionsRev::getVal($setting,"text","");
			$text = __($text,REVSLIDER_TEXTDOMAIN);
			
			// prevent line break (convert spaces to nbsp)
			$text = str_replace(" ","&nbsp;",$text);
			
			if($setting["type"] == UniteSettingsRev::TYPE_CHECKBOX)
				$text = "<label for='{$setting["id"]}'>{$text}</label>";
			
			//set settings text width:
			$textWidth = "";
			if(isset($setting["textWidth"])) $textWidth = 'width="'.$setting["textWidth"].'"';
			
			$description = UniteFunctionsRev::getVal($setting, "description");
			$description = __($description,REVSLIDER_TEXTDOMAIN);
			
			$unit = UniteFunctionsRev::getVal($setting, "unit");
			$unit = __($unit,REVSLIDER_TEXTDOMAIN);
			
			$required = UniteFunctionsRev::getVal($setting, "required");
			
			$addHtml = UniteFunctionsRev::getVal($setting, UniteSettingsRev::PARAM_ADDTEXT);			
			$addHtmlBefore = UniteFunctionsRev::getVal($setting, UniteSettingsRev::PARAM_ADDTEXT_BEFORE_ELEMENT);			
			
			
			//set if draw text or not.
			$toDrawText = true;
			if($setting["type"] == UniteSettingsRev::TYPE_BUTTON || $setting["type"] == UniteSettingsRev::TYPE_MULTIPLE_TEXT)
				$toDrawText = false;
				
			$settingID = $setting["id"];
			$attribsText = UniteFunctionsRev::getVal($setting, "attrib_text");
			
			$info = ($toDrawText == true && $description !== '') ? ' <div class="setting_info">i</div>' : '';
			
			?>
				<li id="<?php echo $settingID?>_row" <?php echo $rowStyle." ".$rowClass?>>
					
					<?php if($toDrawText == true):?>
						<div id="<?php echo $settingID?>_text" class='setting_text' title="<?php echo $description?>" <?php echo $attribsText?>><?php echo $text.$info ?></div>
					<?php endif?>
					
					<?php if(!empty($addHtmlBefore)):?>
						<div class="settings_addhtmlbefore"><?php echo $addHtmlBefore?></div>
					<?php endif?>
					
					<div class='setting_input'>
						<?php $this->drawInputs($setting);?>
					</div>
					<?php if(!empty($unit)):?>
						<div class='setting_unit'><?php echo $unit?></div>
					<?php endif?>
					<?php if(!empty($required)):?>
						<div class='setting_required'>*</div>
					<?php endif?>
					<?php if(!empty($addHtml)):?>
						<div class="settings_addhtml"><?php echo $addHtml?></div>
					<?php endif?>
					<div class="clear"></div>
				</li>
				<?php
				if($setting['name'] == 'shadow_type'){ //For shadow types, add box with shadow types
					$this->drawShadowTypes($setting['value']);
				}
		}
		
		/**
		 * 
		 * insert settings into saps array
		 */
		private function groupSettingsIntoSaps(){
			$arrSections = $this->settings->getArrSections();
			$arrSaps = $arrSections[0]["arrSaps"];
			$arrSettings = $this->settings->getArrSettings(); 
			
			//group settings by saps
			foreach($arrSettings as $key=>$setting){
				
				$sapID = $setting["sap"];
				
				if(isset($arrSaps[$sapID]["settings"]))
					$arrSaps[$sapID]["settings"][] = $setting;
				else 
					$arrSaps[$sapID]["settings"] = array($setting);
			}
			return($arrSaps);
		}
		
		/**
		 * 
		 * draw buttons that defined earlier
		 */
		private function drawButtons(){
			foreach($this->arrButtons as $key=>$button){
				if($key>0)
				echo "<span class='hor_sap'></span>";
				echo UniteFunctionsRev::getHtmlLink("#", $button["title"],$button["id"],$button["class"]);
			}
		}
		
		/**
		 * 
		 * draw some setting, can be setting array or name
		 */
		public function drawSetting($setting,$state = null){
			if(gettype($setting) == "string")
				$setting = $this->settings->getSettingByName($setting);
			
			$setting = apply_filters('revslider_modify_sidebar_settings', $setting);
			
			switch($state){
				case "hidden":
					$setting["hidden"] = true;
				break;
			}
				
			switch($setting["type"]){
				case UniteSettingsRev::TYPE_HR:
					$this->drawHrRow($setting);
				break;
				case UniteSettingsRev::TYPE_STATIC_TEXT:
					$this->drawTextRow($setting);
				break;
				default:
					$this->drawSettingRow($setting);
				break;
			}
		}
		
		/**
		 * 
		 * draw setting by bulk names
		 */
		public function drawSettingsByNames($arrSettingNames,$state=null){
			if(gettype($arrSettingNames) == "string")
				$arrSettingNames = explode(",",$arrSettingNames);
				
			foreach($arrSettingNames as $name)
				$this->drawSetting($name,$state);
		}
		
		
		/**
		 * 
		 * draw all settings
		 */
		public function drawSettings(){
			$this->prepareToDraw();
			$this->drawHeaderIncludes();
			
			
			$arrSaps = $this->groupSettingsIntoSaps();			
			
			$class = "postbox unite-postbox";
			if(!empty($this->addClass))
				$class .= " ".$this->addClass;
			
			//draw wrapper
			echo "<div class='settings_wrapper'>";
				
			//draw settings - advanced - with sections
			foreach($arrSaps as $key=>$sap):

				//set accordion closed
				$style = "";
				if($this->isAccordion == false){
					$h3Class = "class='no-accordion'";
				}else{
					$h3Class = "";
					if($key>0){
						$style = "style='display:none;'";
						$h3Class = "class='box_closed'";
					}
				}
					
				$text = $sap["text"];
				$icon = $sap["icon"];
				$text = __($text,REVSLIDER_TEXTDOMAIN);
				
				?>
					<div class="<?php echo $class?>">
						<h3 <?php echo $h3Class?>><i style="float:left;margin-top:4px;font-size:14px;" class="<?php echo $icon?>"></i>
						
						<?php if($this->isAccordion == true):?>
							<div class="postbox-arrow"></div>
						<?php endif?>
						
							<span><?php echo $text ?></span>
						</h3>			
												
						<div class="inside" <?php echo $style?> >
							<ul class="list_settings">
						<?php
						
							foreach($sap["settings"] as $setting){
								$this->drawSetting($setting);
							}
							
							?>
							</ul>
							
							<?php 
							if(!empty($this->arrButtons)){
								?>
								<div class="clear"></div>
								<div class="settings_buttons">
								<?php 
									$this->drawButtons();
								?>
								</div>	
								<div class="clear"></div>
								<?php 								
							}								
						?>
						
							<div class="clear"></div>
						</div>
					</div>
				<?php 			
														
			endforeach;
			
			echo "</div>";	//wrapper close
		}
		
		
		//-----------------------------------------------------------------------------------------------
		// draw sections menu
		public function drawSections($activeSection=0){
			if(!empty($this->arrSections)):
				echo "<ul class='listSections' >";
				for($i=0;$i<count($this->arrSections);$i++):
					$class = "";
					if($activeSection == $i) $class="class='selected'";
					$text = $this->arrSections[$i]["text"];
					echo '<li '.$class.'><a onfocus="this.blur()" href="#'.($i+1).'"><div>'.$text.'</div></a></li>';
				endfor;
				echo "</ul>";
			endif;
				
			//call custom draw function:
			if($this->customFunction_afterSections) call_user_func($this->customFunction_afterSections);
		}
		
		/**
		 * 
		 * init accordion
		 */
		private function putAccordionInit(){
			?>
			<script type="text/javascript">
				jQuery(document).ready(function(){
					UniteSettingsRev.initAccordion("<?php echo $this->formID?>");
				});				
			</script>
			<?php 
		}
		
		/**
		 * 
		 * activate the accordion
		 */
		public function isAccordion($activate){
			$this->isAccordion = $activate;
		}
		
		
		/**
		 * 
		 * draw settings function
		 */
		public function draw($formID=null){
			if(empty($formID))
				UniteFunctionsRev::throwError("You must provide formID to side settings.");
			
			$this->formID = $formID;
			
			if(!empty($formID)){
				?>
				<form name="<?php echo $formID?>" id="<?php echo $formID?>">
					<?php $this->drawSettings() ?>
				</form>
				<?php 
			}else
				$this->drawSettings();
			
			if($this->isAccordion == true)
				$this->putAccordionInit();
			
		}
		
		
		/**
		 * 
		 * draw shadow types function
		 */
		public function drawShadowTypes($current){
			?>
			<li  class="shadowTypes shadowType-0"<?php echo ($current == 0) ? ' style="display: none;"' : ''; ?>>
				<img class="shadowTypes shadowType-1" src="<?php echo UniteBaseClassRev::$url_plugin; ?>images/shadow1.png"<?php echo ($current == 1) ? '' : ' style="display: none;"'; ?> width="271" />
				<img class="shadowTypes shadowType-2" src="<?php echo UniteBaseClassRev::$url_plugin; ?>images/shadow2.png"<?php echo ($current == 2) ? '' : ' style="display: none;"'; ?> width="271" />
				<img class="shadowTypes shadowType-3" src="<?php echo UniteBaseClassRev::$url_plugin; ?>images/shadow3.png"<?php echo ($current == 3) ? '' : ' style="display: none;"'; ?> width="271" />
			</li>
			<script type="text/javascript">
				/**
				 * set shadow type
				 */
				jQuery("#shadow_type").change(function() {
					var sel = jQuery(this).val();
					jQuery(".shadowTypes").hide();
					if(sel != '0'){
						jQuery(".shadowType-0").show();
						jQuery(".shadowType-"+sel).show();
					}
				});
			</script>
			<?php
		}
		
		/**
		 * 
		 * draw css editor
		 */
		public function drawCssEditor(){
			?>
			<div id="css_editor_wrap" title="<?php _e("Style Editor",REVSLIDER_TEXTDOMAIN) ?>" style="display:none;">

				<div class="tp-present-wrapper-parent"><div class="tp-present-wrapper"><div class="tp-present-caption"><div id="css_preview" class="">example</div></div></div></div>
				<ul class="list_idlehover">
					<li><a href="javascript:void(0)" id="change-type-idle" class="change-type selected"><span class="nowrap">Idle</span></a></li>
					<li><a href="javascript:void(0)" id="change-type-hover" class="change-type"><span class="nowrap">Hover</span></a></li>					
					<div style="clear:both"></div>
				</ul>
				<div id="css-editor-accordion">
					<h3><?php _e("Simple Editor:",REVSLIDER_TEXTDOMAIN)?></h3>
					<div class="css_editor_novice_wrap">
						<table style="border-spacing:0px">
							<tr class="css-edit-enable"><td colspan="4"><input class="css_edit_novice" type="checkbox" name="css_allow" /> <?php _e("enable ",REVSLIDER_TEXTDOMAIN) ?> <span id="css_editor_allow"></span></td></tr>
							<!--<tr class="css-edit-enable css-edit-title topborder"><td colspan="4"></td></tr>-->
							<tr class="css-edit-title"><td colspan="4">Font</td></tr>
							<tr class="css-edit-title noborder"><td colspan="4"></td></tr>														
							<tr>
								<td><?php _e("Family:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<input class="css_edit_novice" style="width:160px; line-height:17px;margin-top:3px;" id="font_family" type="text" name="css_font-family" value="" />
									<div id="font_family_down" class="ui-state-default ui-corner-all" style="margin-right:0px"><span class="ui-icon ui-icon-arrowthick-1-s"></span></div>
								</td>
								<td><?php _e("Size:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div id='font-size-slider'></div>
									<input class="css_edit_novice" type="hidden" name="css_font-size" value="" disabled="disabled" />
								</td>
							</tr>
							<tr>
								<td><?php _e("Color:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td><input type="text" name="css_color" data-linkto="color" style="width:160px" class="inputColorPicker css_edit_novice w100" value="" /></td>
								
								<td><?php _e("Line-Height:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div id='line-height-slider'></div>
									<input class="css_edit_novice" type="hidden" name="css_line-height" value="" disabled="disabled" />
								</td>
							</tr>
							<tr>
								<td><?php _e("Padding:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div class="sub_main_wrapper">
										<div class="subslider_wrapper"><input class="css_edit_novice pad-input sub-input" type="text" name="css_padding[]" value="" /></div>
										<div class="subslider_wrapper"><input class="css_edit_novice pad-input sub-input" type="text" name="css_padding[]" value="" /></div>
										<div class="subslider_wrapper"><input class="css_edit_novice pad-input sub-input" type="text" name="css_padding[]" value="" /></div>
										<div class="subslider_wrapper"><input class="css_edit_novice pad-input sub-input" type="text" name="css_padding[]" value="" /></div>
										<div style="clear:both"></div>
									</div>
								</td>
								<td><?php _e("Weight:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div id='font-weight-slider'></div>
									<input class="css_edit_novice" type="hidden" name="css_font-weight" value="" disabled="disabled" />
								</td>
							</tr>
							<tr>
								<td><?php _e("Style:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td><input type="checkbox" name="css_font-style" class="css_edit_novice" /> <?php _e("italic",REVSLIDER_TEXTDOMAIN) ?></td>
								
								<td><?php _e("Decoration:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<select class="css_edit_novice w100" style="cursor:pointer" name="css_text-decoration">
										<option value="none">none</option>
										<option value="underline">underline</option>
										<option value="overline">overline</option>
										<option value="line-through">line-through</option>
									</select>
								</td>
							</tr>
							<tr class="css-edit-title noborder"><td colspan="4"></td></tr>							
							<tr class="css-edit-title"><td colspan="4">Background</td></tr>
							<tr class="css-edit-title noborder"><td colspan="4"></td></tr>														
							<tr>
								<td><?php _e("Color:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<input type="text" name="css_background-color" style="width:160px;float:left" data-linkto="background-color" class="inputColorPicker css_edit_novice" value="" />
									<a href="javascript:void(0);" id="reset-background-color"><i class="revicon-ccw editoricon" style="float:left"></i></a>
								</td>
								<td><?php _e("Transparency:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div id='background-transparency-slider'></div>
									<input class="css_edit_novice" type="hidden" name="css_background-transparency" value="" disabled="disabled" />
								</td>
							</tr>
							<tr class="css-edit-title noborder"><td colspan="4"></td></tr>							
							<tr class="css-edit-title"><td colspan="4">Border</td></tr>
							<tr class="css-edit-title noborder"><td colspan="4"></td></tr>														
							<tr>
								<td><?php _e("Color:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<input type="text" name="css_border-color-show" data-linkto="border-color" style="width:160px;float:left" class="inputColorPicker css_edit_novice" value="" />
									<input type="hidden" name="css_border-color" class="css_edit_novice" value="" disabled="disabled" />
									<a href="javascript:void(0);" id="reset-border-color"><i class="revicon-ccw editoricon" style="float:left"></i></a>
								</td>
								<td><?php _e("Width:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div id='border-width-slider'></div>
									<input class="css_edit_novice" type="hidden" name="css_border-width" value="" disabled="disabled" />
								</td>
							</tr>
							<tr>
								<td><?php _e("Style:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<select class="css_edit_novice w100" style="cursor:pointer" name="css_border-style">
										<option value="none">none</option>
										<option value="dotted">dotted</option>
										<option value="dashed">dashed</option>
										<option value="solid">solid</option>
										<option value="double">double</option>
									</select>
								</td>
								<td><?php _e("Radius:",REVSLIDER_TEXTDOMAIN) ?></td>
								<td>
									<div class="sub_main_wrapper">										
										<div class="subslider_wrapper"><input class="css_edit_novice corn-input sub-input" type="text" name="css_border-radius[]" value="" /><div class="subslider"></div></div>
										<div class="subslider_wrapper"><input class="css_edit_novice corn-input sub-input" type="text" name="css_border-radius[]" value="" /><div class="subslider"></div></div>
										<div class="subslider_wrapper"><input class="css_edit_novice corn-input sub-input" type="text" name="css_border-radius[]" value="" /><div class="subslider"></div></div>
										<div class="subslider_wrapper"><input class="css_edit_novice corn-input sub-input" type="text" name="css_border-radius[]" value="" /><div class="subslider"></div></div>
										<div style="clear:both"></div>
									</div>
								</td>
							</tr>
							<tr class="css-edit-title noborder"><td colspan="4"></td></tr>							
						</table>
						<div class="css_editor-disable-inputs">&nbsp;</div>
					</div>
					<h3 class="notopradius" style="margin-top:20px"><?php _e("Advanced Editor:",REVSLIDER_TEXTDOMAIN)?></h3>
					<div>
						<textarea id="textarea_edit_expert" rows="20" cols="81"></textarea>
					</div>
				</div>
			</div>
			
			<div id="dialog-change-css" title="<?php _e("Save Styles",REVSLIDER_TEXTDOMAIN) ?>" style="display:none;">
				<p><span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 50px 0;"></span><?php
				_e('Overwrite the current selected class ',REVSLIDER_TEXTDOMAIN);
				echo '"<span id="current-class-handle"></span>"';
				_e(' or save the styles as a new class?',REVSLIDER_TEXTDOMAIN)?></p>
			</div>
			
			<div id="dialog-change-css-save-as" title="<?php _e("Save As",REVSLIDER_TEXTDOMAIN) ?>" style="display:none;">
				<p>
					<?php _e('Save as class:',REVSLIDER_TEXTDOMAIN)?><br />
					<input type="text" name="css_save_as" value="" />
				</p>
			</div>
			
			<?php
		}
		
		
		/**
		 * 
		 * draw css editor
		 */
		public function drawGlobalCssEditor(){
			?>
			<div id="css_static_editor_wrap" title="<?php _e("Global Style Editor",REVSLIDER_TEXTDOMAIN) ?>" style="display:none;">
				<div id="css-static-accordion">
					<h3><?php _e("Dynamic Styles (Not Editable):",REVSLIDER_TEXTDOMAIN)?></h3>
					<div class="css_editor_novice_wrap">
						<textarea id="textarea_show_dynamic_styles" rows="20" cols="81"></textarea>
					</div>
					<h3 class="notopradius" style="margin-top:20px"><?php _e("Static Styles:",REVSLIDER_TEXTDOMAIN)?></h3>
					<div>
						<textarea id="textarea_edit_static" rows="20" cols="81"></textarea>
					</div>
				</div>
			</div>
			
			<div id="dialog-change-css-static" title="<?php _e("Save Static Styles",REVSLIDER_TEXTDOMAIN) ?>" style="display:none;">
				<p><span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 50px 0;"></span><?php _e('Overwrite current static styles?',REVSLIDER_TEXTDOMAIN)?></p>
			</div>
			<?php
		}
	}
?>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               <?php

/**
 * 
 * unite settings class.
 * @version 1.1
 *
 */

	class UniteSettingsRev{
		
		const COLOR_OUTPUT_FLASH = "flash";
		const COLOR_OUTPUT_HTML = "html";
		
		//------------------------------------------------------------
		
		const RELATED_NONE = "";
		const TYPE_TEXT = "text";
		const TYPE_COLOR = "color";
		const TYPE_DATE = "date";
		const TYPE_SELECT = "list";
		const TYPE_CHECKBOX = "checkbox";
		const TYPE_RADIO = "radio";
		const TYPE_TEXTAREA = "textarea";
		const TYPE_STATIC_TEXT = "statictext";
		const TYPE_HR = "hr";
		const TYPE_CUSTOM = "custom";
		const ID_PREFIX = "";
		const TYPE_CONTROL = "control";
		const TYPE_BUTTON = "button";
		const TYPE_MULTIPLE_TEXT = "multitext";
		const TYPE_IMAGE = "image";
		const TYPE_CHECKLIST = "checklist";
		
		//------------------------------------------------------------
		//set data types  
		const DATATYPE_NUMBER = "number";
		const DATATYPE_NUMBEROREMTY = "number_empty";
		const DATATYPE_STRING = "string";
		const DATATYPE_FREE = "free";
		
		const CONTROL_TYPE_ENABLE = "enable";
		const CONTROL_TYPE_DISABLE = "disable";
		const CONTROL_TYPE_SHOW = "show";
		const CONTROL_TYPE_HIDE = "hide";
		
		//additional parameters that can be added to settings.
		const PARAM_TEXTSTYLE = "textStyle";		
		const PARAM_ADDPARAMS = "addparams";	//additional text after the field
		const PARAM_ADDTEXT = "addtext";	//additional text after the field
		const PARAM_ADDTEXT_BEFORE_ELEMENT = "addtext_before_element";	//additional text after the field
		const PARAM_CELLSTYLE = "cellStyle";	//additional text after the field
		
		//view defaults:
		protected $defaultText = "Enter value";
		protected $sap_size = 5;
		
		//other variables:
		protected $HRIdCounter = 0;	//counter of hr id
		
		protected $arrSettings = array();
		protected $arrSections = array();
		protected $arrIndex = array();	//index of name->index of the settings.
		protected $arrSaps = array();
		
		//controls:
		protected $arrControls = array();		//array of items that controlling others (hide/show or enabled/disabled) 
		protected $arrBulkControl = array();	//bulk cotnrol array. if not empty, every settings will be connected with control.
		 
		//custom functions:
		protected $customFunction_afterSections = null;
		protected $colorOutputType = self::COLOR_OUTPUT_HTML;
		
		//-----------------------------------------------------------------------------------------------
		// constructor
	    public function __construct(){
	    	
	    }
		
		//-----------------------------------------------------------------------------------------------
		// get where query according relatedTo and relatedID. 
		private function getWhereQuery(){
			$where = "relatedTo='".$this->relatedTo."' and relatedID='".$this->relatedID."'";
			return($where);
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//set type of color output
		public function setColorOutputType($type){
			$this->colorOutputType = $type;
		}
		
		//-----------------------------------------------------------------------------------------------
		//set the related to/id for saving/restoring settings.
		public function setRelated($relatedTo,$relatedID){
			$this->relatedTo = $relatedTo;
			$this->relatedID = $relatedID;
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//modify the data before save
		private function modifySettingsData($arrSettings){
			
			foreach($arrSettings as $key=>$content){
				switch(getType($content)){
					case "string":
						//replace the unicode line break (sometimes left after json)
						$content = str_replace("u000a","\n",$content);
						$content = str_replace("u000d","",$content);						
					break;
					case "object":
					case "array":
						$content = UniteFunctionsRev::convertStdClassToArray($content);
					break;					
				}
				
				$arrSettings[$key] = $content;												
			}
			
			return($arrSettings);
		}				
				
		//-----------------------------------------------------------------------------------------------
		// add the section value to the setting
		private function checkAndAddSectionAndSap($setting){
			//add section
			if(!empty($this->arrSections)){
				$sectionKey = count($this->arrSections)-1;
				$setting["section"] = $sectionKey;
				$section = $this->arrSections[$sectionKey];
				$sapKey = count($section["arrSaps"])-1;
				$setting["sap"] = $sapKey;
			}
			else{
				//please impliment add sap normal!!! - without sections
			}
			return($setting);
		}
		
		//-----------------------------------------------------------------------------------------------
		// validate items parameter. throw exception on error
		private function validateParamItems($arrParams){
			if(!isset($arrParams["items"])) throw new Exception("no select items presented");
			if(!is_array($arrParams["items"])) throw new Exception("the items parameter should be array");
			//if(empty($arrParams["items"])) throw new Exception("the items array should not be empty");			
		}
		

		//-----------------------------------------------------------------------------------------------
		//add this setting to index
		private function addSettingToIndex($name){
			$this->arrIndex[$name] = count($this->arrSettings)-1;
		}
		
		//-----------------------------------------------------------------------------------------------
		//get types array from all the settings:
		protected function getArrTypes(){
			$arrTypesAssoc = array();
			$arrTypes = array();
			foreach($this->arrSettings as $setting){	
				$type = $setting["type"];
				if(!isset($arrTypesAssoc[$type])) $arrTypes[] = $type;
				$arrTypesAssoc[$type] = "";				
			}			
			return($arrTypes);
		}
				

		/**
		 * 
		 * modify the values of settings array
		 */
		private function modifySettingsValues(){
			
		}
		
		
		/**
		 * 
		 * get settings array
		 */
		public function getArrSettings(){
			return($this->arrSettings);
		}
		
		
		/**
		 * 
		 * get the keys of the settings
		 */
		public function getArrSettingNames(){
			$arrKeys = array();
			$arrNames = array();
			foreach($this->arrSettings as $setting){
				$name = UniteFunctionsRev::getVal($setting, "name");
				if(!empty($name))
					$arrNames[] = $name;
			}
			
			return($arrNames);
		}

		/**
		 * 
		 * get the keys of the settings
		 */
		public function getArrSettingNamesAndTitles(){
			$arrKeys = array();
			$arrNames = array();
			foreach($this->arrSettings as $setting){
				$name = UniteFunctionsRev::getVal($setting, "name");
				$title = UniteFunctionsRev::getVal($setting, "text");
				if(!empty($name))
					$arrNames[$name] = $title;
			}
			
			return($arrNames);
		}
		
		
		/**
		 * 
		 * get sections
		 */
		public function getArrSections(){
			return($this->arrSections);
		}
		
		
		/**
		 * 
		 * get controls
		 */
		public function getArrControls(){
			return($this->arrControls);
		}

		
		/**
		 * 
		 * set settings array
		 */
		public function setArrSettings($arrSettings){
			$this->arrSettings = $arrSettings;
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//get number of settings
		public function getNumSettings(){
			$counter = 0;
			foreach($this->arrSettings as $setting){
				switch($setting["type"]){
					case self::TYPE_HR:
					case self::TYPE_STATIC_TEXT:
					break;
					default:
						$counter++;
					break;
				}
			}
			return($counter);
		}
		
		//private function 
		//-----------------------------------------------------------------------------------------------
		// add radio group
		public function addRadio($name,$arrItems,$text = "",$defaultItem="",$arrParams = array()){
			$params = array("items"=>$arrItems);
			$params = array_merge($params,$arrParams);
			$this->add($name,$defaultItem,$text,self::TYPE_RADIO,$params);
		}
		
		//-----------------------------------------------------------------------------------------------
		//add text area control
		public function addTextArea($name,$defaultValue,$text,$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_TEXTAREA,$arrParams);
		}

		//-----------------------------------------------------------------------------------------------
		//add button control
		public function addButton($name,$value,$arrParams = array()){
			$this->add($name,$value,"",self::TYPE_BUTTON,$arrParams);
		}
		
		
		//-----------------------------------------------------------------------------------------------
		// add checkbox element
		public function addCheckbox($name,$defaultValue = false,$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_CHECKBOX,$arrParams);
		}
		
		//-----------------------------------------------------------------------------------------------
		//add text box element
		public function addTextBox($name,$defaultValue = "",$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_TEXT,$arrParams);
		}
		
		//-----------------------------------------------------------------------------------------------
		//add multiple text box element
		public function addMultipleTextBox($name,$defaultValue = "",$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_MULTIPLE_TEXT,$arrParams);
		}

		//-----------------------------------------------------------------------------------------------
		//add image selector
		public function addImage($name,$defaultValue = "",$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_IMAGE,$arrParams);
		}
		
		//-----------------------------------------------------------------------------------------------
		//add color picker setting
		public function addColorPicker($name,$defaultValue = "",$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_COLOR,$arrParams);
		}
		//-----------------------------------------------------------------------------------------------
		//add date picker setting
		public function addDatePicker($name,$defaultValue = "",$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,self::TYPE_DATE,$arrParams);
		}
		//-----------------------------------------------------------------------------------------------
		//add date picker setting
		public function addCodemirror($name,$defaultValue = "",$text = "",$arrParams = array()){
			$this->add($name,$defaultValue,$text,'codemirror',$arrParams);
		}
		
		/**
		 * 
		 * add custom setting
		 */
		public function addCustom($customType,$name,$defaultValue = "",$text = "",$arrParams = array()){
			$params = array();
			$params["custom_type"] = $customType;
			$params = array_merge($params,$arrParams);
			
			$this->add($name,$defaultValue,$text,self::TYPE_CUSTOM,$params);
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//add horezontal sap
		public function addHr($name="",$params=array()){
			$setting = array();
			$setting["type"] = self::TYPE_HR;
			
			//set item name
			$itemName = "";
			if($name != "") $itemName = $name;
			else{	//generate hr id
			  $this->HRIdCounter++;
			  $itemName = "hr".$this->HRIdCounter;
			}
			
			$setting["id"] = self::ID_PREFIX.$itemName;
			$setting["id_row"] = $setting["id"]."_row";
			
			//addsection and sap keys
			$setting = $this->checkAndAddSectionAndSap($setting);
			
			$this->checkAddBulkControl($itemName);
			
			$setting = array_merge($params,$setting);
			$this->arrSettings[] = $setting;
			
			//add to settings index
			$this->addSettingToIndex($itemName);
		}
		
		//-----------------------------------------------------------------------------------------------
		//add static text
		public function addStaticText($text,$name="",$params=array()){
			$setting = array();
			$setting["type"] = self::TYPE_STATIC_TEXT;
			
			//set item name
			$itemName = "";
			if($name != "") $itemName = $name;
			else{	//generate hr id
			  $this->HRIdCounter++;
			  $itemName = "textitem".$this->HRIdCounter;
			}
			
			$setting["id"] = self::ID_PREFIX.$itemName;
			$setting["id_row"] = $setting["id"]."_row";
			$setting["text"] = $text;
			
			$this->checkAddBulkControl($itemName);
			
			$params = array_merge($params,$setting);
			
			//addsection and sap keys
			$setting = $this->checkAndAddSectionAndSap($setting);
			
			$this->arrSettings[] = $setting;
			
			//add to settings index
			$this->addSettingToIndex($itemName);
		}

		/**
		 * add select setting
		 */
		public function addSelect($name,$arrItems,$text,$defaultItem="",$arrParams=array()){
			$params = array("items"=>$arrItems);
			$params = array_merge($params,$arrParams);
			$this->add($name,$defaultItem,$text,self::TYPE_SELECT,$params);
		}
		
		
		/**
		 * add select setting
		 */
		public function addChecklist($name,$arrItems,$text,$defaultItem="",$arrParams=array()){
			$params = array("items"=>$arrItems);
			$params = array_merge($params,$arrParams);
			$this->add($name,$defaultItem,$text,self::TYPE_CHECKLIST,$params);
		}
		
		
		/**
		 * 
		 * add saporator
		 */
		public function addSap($text, $name="", $opened = false, $icon=""){
			
			if(empty($text))
				UniteFunctionsRev::throwError("sap $name must have a text");
			
			//create sap array
			$sap = array();
			$sap["name"] = $name; 
			$sap["text"] = $text; 
			$sap["icon"] = $icon;
			
			if($opened == true) $sap["opened"] = true;
			
			//add sap to current section
			if(!empty($this->arrSections)){
				$lastSection = end($this->arrSections);
				$section_keys = array_keys($this->arrSections);
				$lastSectionKey = end($section_keys);
				$arrSaps = $lastSection["arrSaps"];
				$arrSaps[] = $sap;
				$this->arrSections[$lastSectionKey]["arrSaps"] = $arrSaps; 				
				$sap_keys = array_keys($arrSaps);
				$sapKey = end($sap_keys);
			}
			else{
				$this->arrSaps[] = $sap;
			}
		}
		
		//-----------------------------------------------------------------------------------------------
		//get sap data:
		public function getSap($sapKey,$sectionKey=-1){
			//get sap without sections:
			if($sectionKey == -1) return($this->arrSaps[$sapKey]);
			if(!isset($this->arrSections[$sectionKey])) throw new Exception("Sap on section:".$sectionKey." doesn't exists");
			$arrSaps = $this->arrSections[$sectionKey]["arrSaps"];
			if(!isset($arrSaps[$sapKey])) throw new Exception("Sap with key:".$sapKey." doesn't exists");
			$sap = $arrSaps[$sapKey];
			return($sap);
		}
		
		//-----------------------------------------------------------------------------------------------
		// add a new section. Every settings from now on will be related to this section
		public function addSection($label,$name=""){
						
			if(!empty($this->arrSettings) && empty($this->arrSections))
				UniteFunctionsRev::throwError("You should add first section before begin to add settings. (section: $text)");
				
			if(empty($label)) 
				UniteFunctionsRev::throwError("You have some section without text");

			$arrSection = array(
				"text"=>$label,
				"arrSaps"=>array(),
				"name"=>$name
			);
			
			$this->arrSections[] = $arrSection;
		}
		
		//-----------------------------------------------------------------------------------------------
		//add setting, may be in different type, of values
		protected function add($name,$defaultValue = "",$text = "",$type = self::TYPE_TEXT,$arrParams = array()){
			
			//validation:
			if(empty($name)) throw new Exception("Every setting should have a name!");
			
			switch($type){
				case self::TYPE_RADIO:
				case self::TYPE_SELECT:
					$this->validateParamItems($arrParams);
				break;
				case self::TYPE_CHECKBOX:
					if(!is_bool($defaultValue)) throw new Exception("The checkbox value should be boolean");
				break;
			}
			
			//validate name:
			if(isset($this->arrIndex[$name])) throw new Exception("Duplicate setting name:".$name);
			
			$this->checkAddBulkControl($name);
						
			//set defaults:
			if($text == "") $text = $this->defaultText;
			
			$setting = array();
			$setting["name"] = $name;
			$setting["id"] = self::ID_PREFIX.$name;
			$setting["id_service"] = $setting["id"]."_service";
			$setting["id_row"] = $setting["id"]."_row";
			$setting["type"] = $type;
			$setting["text"] = $text;
			$setting["value"] = $defaultValue;
						
			
			$setting = array_merge($setting,$arrParams);
			
			//set datatype
			if(!isset($setting["datatype"])){
				$datatype = self::DATATYPE_STRING;
				switch ($type){
					case self::TYPE_TEXTAREA:
						$datatype = self::DATATYPE_FREE;
					break;
					default:
						$datatype = self::DATATYPE_STRING;
					break;
				}
				
				$setting["datatype"] = $datatype;
			}
			
			//addsection and sap keys
			$setting = $this->checkAndAddSectionAndSap($setting);
			
			$this->arrSettings[] = $setting;
			
			//add to settings index
			$this->addSettingToIndex($name);
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//add a item that controlling visibility of enabled/disabled of other.
		public function addControl($control_item_name,$controlled_item_name,$control_type,$value){
			
			UniteFunctionsRev::validateNotEmpty($control_item_name,"control parent");
			UniteFunctionsRev::validateNotEmpty($controlled_item_name,"control child");
			UniteFunctionsRev::validateNotEmpty($control_type,"control type");
			UniteFunctionsRev::validateNotEmpty($value,"control value");
			
			$arrControl = array();
			if(isset($this->arrControls[$control_item_name]))
				 $arrControl = $this->arrControls[$control_item_name];
			$arrControl[] = array("name"=>$controlled_item_name,"type"=>$control_type,"value"=>$value);
			$this->arrControls[$control_item_name] = $arrControl;
		}
		
		//-----------------------------------------------------------------------------------------------
		//start control of all settings that comes after this function (between startBulkControl and endBulkControl)
		public function startBulkControl($control_item_name,$control_type,$value){
			$this->arrBulkControl = array("control_name"=>$control_item_name,"type"=>$control_type,"value"=>$value);
		}	
			
		//-----------------------------------------------------------------------------------------------
		//end bulk control
		public function endBulkControl(){
			$this->arrBulkControl = array();
		}
		
		//-----------------------------------------------------------------------------------------------
		//build name->(array index) of the settings. 
		private function buildArrSettingsIndex(){
			$this->arrIndex = array();
			foreach($this->arrSettings as $key=>$value)
				if(isset($value["name"])) $this->arrIndex[$value["name"]] = $key;
		}
		
		//-----------------------------------------------------------------------------------------------
		// set sattes of the settings (enabled/disabled, visible/invisible) by controls
		public function setSettingsStateByControls(){
			
			foreach($this->arrControls as $control_name => $arrControlled){
				//take the control value
				if(!isset($this->arrIndex[$control_name])) throw new Exception("There is not sutch control setting: '$control_name'");
				$index = $this->arrIndex[$control_name];
				$parentValue = strtolower($this->arrSettings[$index]["value"]);
				
				//set child (controlled) attributes
				foreach($arrControlled as $controlled){
					if(!isset($this->arrIndex[$controlled["name"]])) throw new Exception("There is not sutch controlled setting: '".$controlled["name"]."'");
					$indexChild = $this->arrIndex[$controlled["name"]];
					$child = $this->arrSettings[$indexChild];					
					$value = strtolower($controlled["value"]);
					switch($controlled["type"]){
						case self::CONTROL_TYPE_ENABLE:
							if($value != $parentValue) $child["disabled"] = true;
						break;
						case self::CONTROL_TYPE_DISABLE:
							if($value == $parentValue) $child["disabled"] = true;
						break;
						case self::CONTROL_TYPE_SHOW:
							if($value != $parentValue) $child["hidden"] = true;
						break;
						case self::CONTROL_TYPE_HIDE:
							if($value == $parentValue) $child["hidden"] = true;
						break;
					}
					$this->arrSettings[$indexChild] = $child;					
				}								
			}//end foreach
		}
		
		
		//-----------------------------------------------------------------------------------------------
		//check that bulk control is available , and add some element to it. 
		private function checkAddBulkControl($name){
			//add control
			if(!empty($this->arrBulkControl)) 
				$this->addControl($this->arrBulkControl["control_name"],$name,$this->arrBulkControl["type"],$this->arrBulkControl["value"]);			
		}
		
		//-----------------------------------------------------------------------------------------------
		//set custom function that will be run after sections will be drawen
		public function setCustomDrawFunction_afterSections($func){
			$this->customFunction_afterSections = $func;
		}
		
		
		/**
		 * 
		 * parse options from xml field
		 * @param $field
		 */
		private function getOptionsFromXMLField($field,$fieldName){
			$arrOptions = array();
			
			$arrField = (array)$field;
			$options = UniteFunctionsRev::getVal($arrField, "option");
			
			if(empty($options))
				return($arrOptions);
				
			foreach($options as $option){
				
				if(gettype($option) == "string")
					UniteFunctionsRev::throwError("Wrong options type: ".$option." in field: $fieldName");
				
				$attribs = $option->attributes();
				
				$optionValue = (string)UniteFunctionsRev::getVal($attribs, "value");							
				$optionText = (string)UniteFunctionsRev::getVal($attribs, "text");
				
				//validate options:
				UniteFunctionsRev::validateNotEmpty($optionValue,"option value");
				UniteFunctionsRev::validateNotEmpty($optionText,"option text");
				
				$arrOptions[$optionValue] = $optionText;				 
			}
			
			return($arrOptions);
		}
		
		
		/**
		 * 
		 * load settings from xml file
		 */
		public function loadXMLFile($filepath){
			
			if(!file_exists($filepath))
				UniteFunctionsRev::throwError("File: '$filepath' not exists!!!");
			
			$obj = simplexml_load_file($filepath);
			
			if(empty($obj))
				UniteFunctionsRev::throwError("Wrong xml file format: $filepath");
			
			$fieldsets = $obj->fieldset;
            if(!@count($obj->fieldset)){
                $fieldsets = array($fieldsets);
            }
			
			$this->addSection("Xml Settings");
			
			foreach($fieldsets as $fieldset){
				
				//Add Section
				$attribs = $fieldset->attributes();
				
				$sapName = (string)UniteFunctionsRev::getVal($attribs, "name");
				$sapLabel = (string)UniteFunctionsRev::getVal($attribs, "label");
				$sapIcon = (string)UniteFunctionsRev::getVal($attribs, "icon");				
				
				UniteFunctionsRev::validateNotEmpty($sapName,"sapName");
				UniteFunctionsRev::validateNotEmpty($sapLabel,"sapLabel");
				
				$this->addSap($sapLabel,$sapName,false,$sapIcon);
				
				//--- add fields
				$fieldset = (array)$fieldset;				
				$fields = $fieldset["field"];
								
				if(is_array($fields) == false)
					$fields = array($fields);
				
				foreach($fields as $field){
					$attribs = $field->attributes();
					$fieldType = (string)UniteFunctionsRev::getVal($attribs, "type");
					$fieldName = (string)UniteFunctionsRev::getVal($attribs, "name");
					$fieldLabel = (string)UniteFunctionsRev::getVal($attribs, "label");
					$fieldDefaultValue = (string)UniteFunctionsRev::getVal($attribs, "default");
					
					//all other params will be added to "params array".
					$arrMustParams = array("type","name","label","default"); 
					
					$arrParams = array();
					
					foreach($attribs as $key=>$value){
						$key = (string)$key;
						$value = (string)$value;
						
						//skip must params:
						if(in_array($key, $arrMustParams))
							continue;
							
						$arrParams[$key] = $value;
					}
					
					$options = $this->getOptionsFromXMLField($field,$fieldName);
					
					//validate must fields:
					UniteFunctionsRev::validateNotEmpty($fieldType,"type");
					
					//validate name
					if($fieldType != self::TYPE_HR && $fieldType != self::TYPE_CONTROL &&
						$fieldType != "bulk_control_start" && $fieldType != "bulk_control_end")
						UniteFunctionsRev::validateNotEmpty($fieldName,"name");		
					switch ($fieldType){
						case self::TYPE_CHECKBOX:
							$fieldDefaultValue = UniteFunctionsRev::strToBool($fieldDefaultValue);
							$this->addCheckbox($fieldName,$fieldDefaultValue,$fieldLabel,$arrParams);
						break;
						case self::TYPE_COLOR:
							$this->addColorPicker($fieldName,$fieldDefaultValue,$fieldLabel,$arrParams);
						break;
						case self::TYPE_HR:
							$this->addHr();
						break;
						case self::TYPE_TEXT:
							$this->addTextBox($fieldName,$fieldDefaultValue,$fieldLabel,$arrParams);
						break;
						case self::TYPE_MULTIPLE_TEXT:
							$this->addMultipleTextBox($fieldName,$fieldDefaultValue,$fieldLabel,$arrParams);
						break;
						case self::TYPE_STATIC_TEXT:
							$this->addStaticText($fieldLabel, $fieldName, $arrParams);
						break;
						case self::TYPE_IMAGE:
							$this->addImage($fieldName,$fieldDefaultValue,$fieldLabel,$arrParams);
						break;						
						case self::TYPE_SELECT:	
							$this->addSelect($fieldName, $options, $fieldLabel,$fieldDefaultValue,$arrParams);
						break;
						case self::TYPE_CHECKBOX:
							$this->addChecklist($fieldName, $options, $fieldLabel,$fieldDefaultValue,$arrParams);
						break;
						case self::TYPE_RADIO:
							$this->addRadio($fieldName, $options, $fieldLabel,$fieldDefaultValue,$arrParams);
						break;
						case self::TYPE_TEXTAREA:
							$this->addTextArea($fieldName, $fieldDefaultValue, $fieldLabel, $arrParams);
						break;
						case self::TYPE_CUSTOM:
							$this->add($fieldName, $fieldDefaultValue, $fieldLabel, self::TYPE_CUSTOM, $arrParams);
						break;
						case self::TYPE_BUTTON:
							$this->addButton($fieldName, $fieldDefaultValue, $arrParams);
						break;
						case self::TYPE_CONTROL:
							$parent = UniteFunctionsRev::getVal($arrParams, "parent");
							$child =  UniteFunctionsRev::getVal($arrParams, "child");
							$ctype =  UniteFunctionsRev::getVal($arrParams, "ctype");
							$value =  UniteFunctionsRev::getVal($arrParams, "value");
							$this->addControl($parent, $child, $ctype, $value);
						break;			
						case "bulk_control_start":
							$parent = UniteFunctionsRev::getVal($arrParams, "parent");
							$ctype =  UniteFunctionsRev::getVal($arrParams, "ctype");
							$value =  UniteFunctionsRev::getVal($arrParams, "value");
							
							$this->startBulkControl($parent, $ctype, $value);
						break;
						case "bulk_control_end":
							$this->endBulkControl();
						break;	
						case "codemirror":
							$this->addCodemirror($fieldName,$fieldDefaultValue,$fieldLabel,$arrParams);
						break;		
						default:
							UniteFunctionsRev::throwError("wrong type: $fieldType");
						break;						
					}
					
				}
			}
		}
		
		
		/**
		 * 
		 * get titles and descriptions array
		 */
		public function getArrTextFromAllSettings(){
			$arr = array();
			$arrUnits = array();
			
			//get saps array:
			foreach($this->arrSections as $section){
				$arrSaps = UniteFunctionsRev::getVal($section, "arrSaps");
				if(empty($arrSaps))
					continue;
				foreach($arrSaps as $sap){
					$text = $sap["text"];
					if(!empty($text))
						$arr[] = $text;
				}
			}
			
			foreach($this->arrSettings as $setting){
				
				$text = UniteFunctionsRev::getVal($setting, "text");				
				$desc = UniteFunctionsRev::getVal($setting, "description");
				$unit = UniteFunctionsRev::getVal($setting, "unit");
								
				if(!empty($text))
					$arr[] = $text;
					
				if(!empty($desc))
					$arr[] = $desc;
					
				if(!empty($unit)){
					if(!isset($arrUnits[$unit]))
						$arr[] = $unit;	
					$arrUnits[$unit] = true;
				}

				$items = UniteFunctionsRev::getVal($setting, "items");
				if(!empty($items)){
					foreach($items as $item){
						if(!isset($arrUnits[$item]))
							$arr[] = $item;	
						$arrUnits[$item] = true;
					}
				}				
			}
			
			return($arr);
		}

		
		/**
		 * 
		 * get setting array by name
		 */
		public function getSettingByName($name){
			
			//if index present
			if(!empty($this->arrIndex)){
				if(array_key_exists($name, $this->arrIndex) == false)
					UniteFunctionsRev::throwError("setting $name not found");
				$index = $this->arrIndex[$name];
				$setting = $this->arrSettings[$index];
				return($setting);
			}
			
			//if no index
			foreach($this->arrSettings as $setting){
				$settingName = UniteFunctionsRev::getVal($setting, "name");
				if($settingName == $name)
					return($setting);
			}
			
			UniteFunctionsRev::throwError("Setting with name: $name don't exists");
		}
		
		
		/**
		 * 
		 * get value of some setting
		 * @param $name
		 */
		public function getSettingValue($name,$default=""){
			$setting = $this->getSettingByName($name);
			$value = UniteFunctionsRev::getVal($setting, "value",$default);

			return($value);
		}
		
		
		/**
		 * 
		 * update setting array by name
		 */
		public function updateArrSettingByName($name,$setting){
			
			foreach($this->arrSettings as $key => $settingExisting){
				$settingName = UniteFunctionsRev::getVal($settingExisting,"name");
				if($settingName == $name){
					$this->arrSettings[$key] = $setting;
					return(false);
				}
			}
			
			UniteFunctionsRev::throwError("Setting with name: $name don't exists");
		}
		
		
		/**
		 * 
		 * update default value in the setting
		 */
		public function updateSettingValue($name,$value){
			$setting = $this->getSettingByName($name);
			$setting["value"] = $value;
			
			$this->updateArrSettingByName($name, $setting);
		}
		
		
		/**
		 * 
		 * modify some value by it's datatype
		 */
		public function modifyValueByDatatype($value,$datatype){
			if(is_array($value)){
				foreach($value as $key => $val){
					$value[$key] = $this->modifyValueByDatatypeFunc($val,$datatype);
				}
			}else{
				$value = $this->modifyValueByDatatypeFunc($value,$datatype);
			}
			return($value);
		}
		
		/**
		 * 
		 * modify some value by it's datatype
		 */
		public function modifyValueByDatatypeFunc($value,$datatype){
			switch($datatype){
				case self::DATATYPE_STRING:
					$value = strip_tags($value, '<link>');
				break;
				case self::DATATYPE_NUMBER:
					$value = floatval($value);	//turn every string to float
					if(!is_numeric($value))
						$value = 0;
				break;
				case self::DATATYPE_NUMBEROREMTY:
					$value = trim($value);
					if($value !== "")
						$value = floatval($value);	//turn every string to float
				break;
			}
			
			return $value;
		}
		
		/**
		 * 
		 * set values from array of stored settings elsewhere.
		 */
		public function setStoredValues($arrValues){
			
			foreach($this->arrSettings as $key=>$setting){
				
				$name = UniteFunctionsRev::getVal($setting, "name");
				
				//type consolidation
				$type = UniteFunctionsRev::getVal($setting, "type");
				
				$datatype = UniteFunctionsRev::getVal($setting, "datatype");
				
				//skip custom type
				$customType = UniteFunctionsRev::getVal($setting, "custom_type");
								
				if(!empty($customType))
					continue;
						
				if(array_key_exists($name, $arrValues)){
					$value = $arrValues[$name];
					$value = $this->modifyValueByDatatype($value, $datatype);					
					$this->arrSettings[$key]["value"] = $value;
					$arrValues[$name] = $value;
				}
				
			}//end foreach
			
			return($arrValues);
		}

		
		/**
		 * get setting values. replace from stored ones if given
		 */
		public function getArrValues(){
			
			$arrSettingsOutput = array();
			
			//modify settings by type
			foreach($this->arrSettings as $setting){
				if($setting["type"] == self::TYPE_HR 
				  ||$setting["type"] == self::TYPE_STATIC_TEXT)
					continue;
					
				$value = $setting["value"];
				
				//modify value by type
				switch($setting["type"]){
					case self::TYPE_COLOR:
							$value = strtolower($value);
							//set color output type 
							if($this->colorOutputType == self::COLOR_OUTPUT_FLASH)
								$value = str_replace("#","0x",$value);
					break;
					case self::TYPE_CHECKBOX:
						if($value == true) $value = "true";
						else $value = "false";
					break;
				}
				
				//remove lf
				if(isset($setting["remove_lf"])){
					$value = str_replace("\n","",$value);
					$value = str_replace("\r\n","",$value);
				}
				
				$arrSettingsOutput[$setting["name"]] = $value;
			}
			
			return($arrSettingsOutput);
		}

		
		/**
		* Update values from post meta
		 */
		public function updateValuesFromPostMeta($postID){

			//update setting values array from meta
			$arrNames = $this->getArrSettingNames();
			$arrValues = array();
			$arrMeta = get_post_meta($postID);

			if(!empty($arrMeta) && is_array($arrMeta)){
				foreach($arrNames as $name){
					if(array_key_exists($name, $arrMeta) == false)
						continue;
					
					$value = get_post_meta($postID, $name,true);
					$arrValues[$name] = $value;				
				}
			}
			
			//dmp($postID);dmp($arrValues);exit();
			
			$this->setStoredValues($arrValues);
			
		}
		
		
	}
	
?>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?php

	class RevSlider extends UniteElementsBaseRev{

		const DEFAULT_POST_SORTBY = "ID";
		const DEFAULT_POST_SORTDIR = "DESC";
		
		const VALIDATE_NUMERIC = "numeric";
		const VALIDATE_EMPTY = "empty";
		const FORCE_NUMERIC = "force_numeric";
		
		const SLIDER_TYPE_GALLERY = "gallery";
		const SLIDER_TYPE_POSTS = "posts";
		const SLIDER_TYPE_TEMPLATE = "template";
		const SLIDER_TYPE_ALL = "all";
		
		private $id;
		private $title;
		private $alias;
		private $arrParams;
		private $arrSlides = null;
		
		public function __construct(){
			parent::__construct();
		}
		
		
		/**
		 * 
		 * return if the slider is inited or not
		 */
		public function isInited(){
			if(!empty($this->id))
				return(true);
				
			return(false);
		}
		
		
		/**
		 * 
		 * validate that the slider is inited. if not - throw error
		 */
		private function validateInited(){
			if(empty($this->id))
				UniteFunctionsRev::throwError("The slider is not inited!");
		}
		
		/**
		 * 
		 * init slider by db data
		 * 
		 */
		public function initByDBData($arrData){
			
			$this->id = $arrData["id"];
			$this->title = $arrData["title"];
			$this->alias = $arrData["alias"];
			
			$params = $arrData["params"];
			$params = (array)json_decode($params);
			
			$this->arrParams = $params;
		}
		
		
		/**
		 * 
		 * init the slider object by database id
		 */
		public function initByID($sliderID){
			UniteFunctionsRev::validateNumeric($sliderID,"Slider ID");
			$sliderID = $this->db->escape($sliderID);
			
			try{
				$sliderData = $this->db->fetchSingle(GlobalsRevSlider::$table_sliders,"id=$sliderID");								
			}catch(Exception $e){
				UniteFunctionsRev::throwError("Slider with ID: $sliderID Not Found");
			}
			
			$this->initByDBData($sliderData);
		}

		/**
		 * 
		 * init slider by alias
		 */
		public function initByAlias($alias){
			$alias = $this->db->escape($alias);

			try{
				$where = "alias='$alias'";
				
				$sliderData = $this->db->fetchSingle(GlobalsRevSlider::$table_sliders,$where);
				
			}catch(Exception $e){
				$arrAliases = $this->getAllSliderAliases();
				$strAliases = "";
				if(!empty($arrAliases))
					$strAliases = "'".implode("' or '", $arrAliases)."'";
					
				$errorMessage = "Slider with alias <strong>$alias</strong> not found.";
				if(!empty($strAliases))
					$errorMessage .= " <br><br>Maybe you mean: ".$strAliases;
					
				UniteFunctionsRev::throwError($errorMessage);
			}
			
			$this->initByDBData($sliderData);
		}
		
		
		/**
		 * 
		 * init by id or alias
		 */
		public function initByMixed($mixed){
			if(is_numeric($mixed))
				$this->initByID($mixed);
			else
				$this->initByAlias($mixed);
		}
		
		
		/**
		 * 
		 * get data functions
		 */
		public function getTitle(){
			return($this->title);
		}
		
		public function getID(){
			return($this->id);
		}
		
		public function getParams(){
			return($this->arrParams);
		}
		
		/**
		 * 
		 * set slider params
		 */
		public function setParams($arrParams){
			$this->arrParams = $arrParams;
		}
		
		
		/**
		 * 
		 * get parameter from params array. if no default, then the param is a must!
		 */
		function getParam($name,$default=null,$validateType = null,$title=""){
			
			if($default === null){
				if(!array_key_exists($name, $this->arrParams))
					UniteFunctionsRev::throwError("The param <b>$name</b> not found in slider params.");
				
				$default = "";
			}
			
			$value = UniteFunctionsRev::getVal($this->arrParams, $name,$default);
			
			//validation:
			switch($validateType){
				case self::VALIDATE_NUMERIC:
				case self::VALIDATE_EMPTY:
					$paramTitle = !empty($title)?$title:$name;
					if($value !== "0" && $value !== 0 && empty($value))
						UniteFunctionsRev::throwError("The param <strong>$paramTitle</strong> should not be empty.");
				break;
				case self::VALIDATE_NUMERIC:
					$paramTitle = !empty($title)?$title:$name;
					if(!is_numeric($value))
						UniteFunctionsRev::throwError("The param <strong>$paramTitle</strong> should be numeric. Now it's: $value");
				break;
				case self::FORCE_NUMERIC:
					if(!is_numeric($value)){
						$value = 0;
						if(!empty($default))
							$value = $default;
					}
				break; 
			}
			
			return $value;
		}
		
		public function getAlias(){
			return($this->alias);
		}
		
		/**
		 * get combination of title (alias)
		 */
		public function getShowTitle(){
			$showTitle = $this->title." ($this->alias)";
			return($showTitle);
		}
		
		/**
		 * 
		 * get slider shortcode
		 */
		public function getShortcode(){
			$shortCode = "[rev_slider ".$this->alias."]";
			return($shortCode);
		}
		
		
		/**
		 * 
		 * check if alias exists in DB
		 */
		public function isAliasExistsInDB($alias){
			$alias = $this->db->escape($alias);
			
			$where = "alias='$alias'";
			if(!empty($this->id))
				$where .= " and id != '".$this->id."'";
				
			$response = $this->db->fetch(GlobalsRevSlider::$table_sliders,$where);
			return(!empty($response));
			
		}
		
        
		/**
		 * 
		 * check if alias exists in DB
		 */
		public static function isAliasExists($alias){
            global $wpdb;
			
            $response = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".GlobalsRevSlider::$table_sliders." WHERE alias = %s", $alias));
			
			return(!empty($response));
		}
        
		
		/**
		 * 
		 * validate settings for add
		 */
		private function validateInputSettings($title,$alias,$params){
			UniteFunctionsRev::validateNotEmpty($title,"title");
			UniteFunctionsRev::validateNotEmpty($alias,"alias");
			
			if($this->isAliasExistsInDB($alias))
				UniteFunctionsRev::throwError("Some other slider with alias '$alias' already exists");
			
			$sourceType = UniteFunctionsRev::getVal($params, "source_type");
			$tempaletID =  UniteFunctionsRev::getVal($params, "slider_template_id");
			
			if($sourceType == "posts" && empty($tempaletID))
				UniteFunctionsRev::throwError("The slider should have a template, please create a slider through 'Create New Slider Template' that will be a template to this slider.");
			
		}
		
		
		
		/**
		 * 
		 * create / update slider from options
		 */
		private function createUpdateSliderFromOptions($options,$sliderID = null, $settingsMain, $settingsParams){
			
			$arrMain = UniteFunctionsRev::getVal($options, "main");
			$params = UniteFunctionsRev::getVal($options, "params");
			$isTemplate = UniteFunctionsRev::getVal($options, "template");
			
			if($isTemplate == "true")
				$params['template'] = "true";
			else
				$params['template'] = "false";
				
			//trim all input data
			$arrMain = UniteFunctionsRev::trimArrayItems($arrMain);
			
			//modify the data
			$arrMain = $settingsMain->setStoredValues($arrMain);
			
			$params = UniteFunctionsRev::trimArrayItems($params);
			$params = $settingsParams->setStoredValues($params);
			
			$params = array_merge($arrMain,$params);
			
			$title = UniteFunctionsRev::getVal($arrMain, "title");
			$alias = UniteFunctionsRev::getVal($arrMain, "alias");
			
			if(!empty($sliderID))
				$this->initByID($sliderID);
				
			$this->validateInputSettings($title, $alias, $params);
			
			$jsonParams = json_encode($params);
			
			//insert slider to database
			$arrData = array();
			$arrData["title"] = $title;
			$arrData["alias"] = $alias;
			$arrData["params"] = $jsonParams;
			
			if(empty($sliderID)){	//create slider	
				$sliderID = $this->db->insert(GlobalsRevSlider::$table_sliders,$arrData);
				return($sliderID);
				
			}else{	//update slider
				$this->initByID($sliderID);
				
				$sliderID = $this->db->update(GlobalsRevSlider::$table_sliders,$arrData,array("id"=>$sliderID));				
			}
		}
		
		
		
		/**
		 * 
		 * delete slider from datatase
		 */
		private function deleteSlider(){			
			
			$this->validateInited();
			
			//delete slider
			$this->db->delete(GlobalsRevSlider::$table_sliders,"id=".$this->id);
			
			//delete slides
			$this->deleteAllSlides();
			$this->deleteStaticSlide();
		}

		/**
		 * 
		 * delete all slides
		 */
		private function deleteAllSlides(){
			$this->validateInited();
			
			$this->db->delete(GlobalsRevSlider::$table_slides,"slider_id=".$this->id);			
		}
		

		/**
		 * 
		 * delete all slides
		 */
		private function deleteStaticSlide(){
			$this->validateInited();
			
			$this->db->delete(GlobalsRevSlider::$table_static_slides,"slider_id=".$this->id);			
		}
		
		
		/**
		 * 
		 * get all slide children
		 */
		public function getArrSlideChildren($slideID){
		
			$this->validateInited();
			$arrSlides = $this->getSlidesFromGallery();
			if(!isset($arrSlides[$slideID]))
				UniteFunctionsRev::throwError("Slide with id: $slideID not found in the main slides of the slider. Maybe it's child slide.");
			
			$slide = $arrSlides[$slideID];
			$arrChildren = $slide->getArrChildren();
			
			return($arrChildren);
		}
		
		
		
		/**
		 * 
		 * duplicate slider in datatase
		 */
		private function duplicateSlider(){			
			
			$this->validateInited();
			
			//get slider number:
			$response = $this->db->fetch(GlobalsRevSlider::$table_sliders);
			$numSliders = count($response);
			$newSliderSerial = $numSliders+1;
			
			$newSliderTitle = "Slider".$newSliderSerial;
			$newSliderAlias = "slider".$newSliderSerial;
			
			//insert a new slider
			$sqlSelect = "select ".GlobalsRevSlider::FIELDS_SLIDER." from ".GlobalsRevSlider::$table_sliders." where id=".$this->id."";
			$sqlInsert = "insert into ".GlobalsRevSlider::$table_sliders." (".GlobalsRevSlider::FIELDS_SLIDER.") ($sqlSelect)";
			
			$this->db->runSql($sqlInsert);
			$lastID = $this->db->getLastInsertID();
			UniteFunctionsRev::validateNotEmpty($lastID);
			
			//update the new slider with the title and the alias values
			$arrUpdate = array();
			$arrUpdate["title"] = $newSliderTitle;
			$arrUpdate["alias"] = $newSliderAlias;
			
			//update params
			$params = $this->arrParams;
			$params["title"] = $newSliderTitle;
			$params["alias"] = $newSliderAlias;
			$jsonParams = json_encode($params);
			$arrUpdate["params"] = $jsonParams;
			
			$this->db->update(GlobalsRevSlider::$table_sliders, $arrUpdate, array("id"=>$lastID));
			
			
			//duplicate slides
			$fields_slide = GlobalsRevSlider::FIELDS_SLIDE;
			$fields_slide = str_replace("slider_id", $lastID, $fields_slide);
			
			$sqlSelect = "select ".$fields_slide." from ".GlobalsRevSlider::$table_slides." where slider_id=".$this->id;
			$sqlInsert = "insert into ".GlobalsRevSlider::$table_slides." (".GlobalsRevSlider::FIELDS_SLIDE.") ($sqlSelect)";
			
			$this->db->runSql($sqlInsert);
			
			//duplicate static slide if exists
			$slide = new RevSlide();
			$staticID = $slide->getStaticSlideID($this->id);
			if($staticID !== false){
				$record = $this->db->fetchSingle(GlobalsRevSlider::$table_static_slides,"id=$staticID");
				unset($record['id']);
				$record['slider_id'] = $lastID;
				
				$this->db->insert(GlobalsRevSlider::$table_static_slides, $record);
			}
		}
		
		
		/**
		 * 
		 * duplicate slide
		 */
		public function duplicateSlide($slideID){
			$slide = new RevSlide();
			$slide->initByID($slideID);
			$order = $slide->getOrder();
			$slides = $this->getSlidesFromGallery();
			$newOrder = $order+1;
			$this->shiftOrder($newOrder);
			
			//do duplication
			$sqlSelect = "select ".GlobalsRevSlider::FIELDS_SLIDE." from ".GlobalsRevSlider::$table_slides." where id=".$slideID;
			$sqlInsert = "insert into ".GlobalsRevSlider::$table_slides." (".GlobalsRevSlider::FIELDS_SLIDE.") ($sqlSelect)";
			
			$this->db->runSql($sqlInsert);
			$lastID = $this->db->getLastInsertID();
			UniteFunctionsRev::validateNotEmpty($lastID);
			
			//update order
			$arrUpdate = array("slide_order"=>$newOrder);
			
			$this->db->update(GlobalsRevSlider::$table_slides,$arrUpdate, array("id"=>$lastID));
			
			return($lastID);
		}
		
		
		/**
		 * 
		 * copy / move slide
		 */		
		private function copyMoveSlide($slideID,$targetSliderID,$operation){
			
			if($operation == "move"){
				
				$targetSlider = new RevSlider();
				$targetSlider->initByID($targetSliderID);
				$maxOrder = $targetSlider->getMaxOrder();
				$newOrder = $maxOrder+1;
				$arrUpdate = array("slider_id"=>$targetSliderID,"slide_order"=>$newOrder);	
				
				//update children
				$arrChildren = $this->getArrSlideChildren($slideID);
				foreach($arrChildren as $child){
					$childID = $child->getID();
					$this->db->update(GlobalsRevSlider::$table_slides,$arrUpdate,array("id"=>$childID));
				}
				
				$this->db->update(GlobalsRevSlider::$table_slides,$arrUpdate,array("id"=>$slideID));
				
			}else{	//in place of copy
				$newSlideID = $this->duplicateSlide($slideID);
				$this->duplicateChildren($slideID, $newSlideID);
				
				$this->copyMoveSlide($newSlideID,$targetSliderID,"move");
			}
		}
		
		
		/**
		 * 
		 * shift order of the slides from specific order
		 */
		private function shiftOrder($fromOrder){
			
			$where = " slider_id=".$this->id." and slide_order >= $fromOrder";
			$sql = "update ".GlobalsRevSlider::$table_slides." set slide_order=(slide_order+1) where $where";
			$this->db->runSql($sql);
			
		}
		
		
		/**
		 * 
		 * create slider in database from options
		 */
		public function createSliderFromOptions($options,$settingsMain,$settingsParams){
			$sliderID = $this->createUpdateSliderFromOptions($options,null,$settingsMain,$settingsParams);
			return($slid