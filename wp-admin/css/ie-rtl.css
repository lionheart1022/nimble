hop_order_refund',
			apply_filters( 'woocommerce_register_post_type_shop_order_refund',
				array(
					'label'                            => __( 'Refunds', 'woocommerce' ),
					'capability_type'                  => 'shop_order',
					'public'                           => false,
					'hierarchical'                     => false,
					'supports'                         => false,
					'exclude_from_orders_screen'       => false,
					'add_order_meta_boxes'             => false,
					'exclude_from_order_count'         => true,
					'exclude_from_order_views'         => false,
					'exclude_from_order_reports'       => false,
					'exclude_from_order_sales_reports' => true,
					'class_name'                       => 'WC_Order_Refund'
				)
			)
		);

		if ( 'yes' == get_option( 'woocommerce_enable_coupons' ) ) {
			register_post_type( 'shop_coupon',
				apply_filters( 'woocommerce_register_post_type_shop_coupon',
					array(
						'labels'              => array(
								'name'               => __( 'Coupons', 'woocommerce' ),
								'singular_name'      => __( 'Coupon', 'woocommerce' ),
								'menu_name'          => _x( 'Coupons', 'Admin menu name', 'woocommerce' ),
								'add_new'            => __( 'Add Coupon', 'woocommerce' ),
								'add_new_item'       => __( 'Add New Coupon', 'woocommerce' ),
								'edit'               => __( 'Edit', 'woocommerce' ),
								'edit_item'          => __( 'Edit Coupon', 'woocommerce' ),
								'new_item'           => __( 'New Coupon', 'woocommerce' ),
								'view'               => __( 'View Coupons', 'woocommerce' ),
								'view_item'          => __( 'View Coupon', 'woocommerce' ),
								'search_items'       => __( 'Search Coupons', 'woocommerce' ),
								'not_found'          => __( 'No Coupons found', 'woocommerce' ),
								'not_found_in_trash' => __( 'No Coupons found in trash', 'woocommerce' ),
								'parent'             => __( 'Parent Coupon', 'woocommerce' )
							),
						'description'         => __( 'This is where you can add new coupons that customers can use in your store.', 'woocommerce' ),
						'public'              => false,
						'show_ui'             => true,
						'capability_type'     => 'shop_coupon',
						'map_meta_cap'        => true,
						'publicly_queryable'  => false,
						'exclude_from_search' => true,
						'show_in_menu'        => current_user_can( 'manage_woocommerce' ) ? 'woocommerce' : true,
						'hierarchical'        => false,
						'rewrite'             => false,
						'query_var'           => false,
						'supports'            => array( 'title' ),
						'show_in_nav_menus'   => false,
						'show_in_admin_bar'   => true
					)
				)
			);
		}

		register_post_type( 'shop_webhook',
			apply_filters( 'woocommerce_register_post_type_shop_webhook',
				array(
					'labels'              => array(
						'name'               => __( 'Webhooks', 'woocommerce' ),
						'singular_name'      => __( 'Webhook', 'woocommerce' ),
						'menu_name'          => _x( 'Webhooks', 'Admin menu name', 'woocommerce' ),
						'add_new'            => __( 'Add Webhook', 'woocommerce' ),
						'add_new_item'       => __( 'Add New Webhook', 'woocommerce' ),
						'edit'               => __( 'Edit', 'woocommerce' ),
						'edit_item'          => __( 'Edit Webhook', 'woocommerce' ),
						'new_item'           => __( 'New Webhook', 'woocommerce' ),
						'view'               => __( 'View Webhooks', 'woocommerce' ),
						'view_item'          => __( 'View Webhook', 'woocommerce' ),
						'search_items'       => __( 'Search Webhooks', 'woocommerce' ),
						'not_found'          => __( 'No Webhooks found', 'woocommerce' ),
						'not_found_in_trash' => __( 'No Webhooks found in trash', 'woocommerce' ),
						'parent'             => __( 'Parent Webhook', 'woocommerce' )
					),
					'public'              => false,
					'show_ui'             => true,
					'capability_type'     => 'shop_webhook',
					'map_meta_cap'        => true,
					'publicly_queryable'  => false,
					'exclude_from_search' => true,
					'show_in_menu'        => false,
					'hierarchical'        => false,
					'rewrite'             => false,
					'query_var'           => false,
					'supports'            => false,
					'show_in_nav_menus'   => false,
					'show_in_admin_bar'   => false
				)
			)
		);
	}

	/**
	 * Register our custom post statuses, used for order status.
	 */
	public static function register_post_status() {
		register_post_status( 'wc-pending', array(
			'label'                     => _x( 'Pending Payment', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'Pending Payment <span class="count">(%s)</span>', 'Pending Payment <span class="count">(%s)</span>', 'woocommerce' )
		) );
		register_post_status( 'wc-processing', array(
			'label'                     => _x( 'Processing', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'Processing <span class="count">(%s)</span>', 'Processing <span class="count">(%s)</span>', 'woocommerce' )
		) );
		register_post_status( 'wc-on-hold', array(
			'label'                     => _x( 'On Hold', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'On Hold <span class="count">(%s)</span>', 'On Hold <span class="count">(%s)</span>', 'woocommerce' )
		) );
		register_post_status( 'wc-completed', array(
			'label'                     => _x( 'Completed', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'Completed <span class="count">(%s)</span>', 'Completed <span class="count">(%s)</span>', 'woocommerce' )
		) );
		register_post_status( 'wc-cancelled', array(
			'label'                     => _x( 'Cancelled', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'Cancelled <span class="count">(%s)</span>', 'Cancelled <span class="count">(%s)</span>', 'woocommerce' )
		) );
		register_post_status( 'wc-refunded', array(
			'label'                     => _x( 'Refunded', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'Refunded <span class="count">(%s)</span>', 'Refunded <span class="count">(%s)</span>', 'woocommerce' )
		) );
		register_post_status( 'wc-failed', array(
			'label'                     => _x( 'Failed', 'Order status', 'woocommerce' ),
			'public'                    => false,
			'exclude_from_search'       => false,
			'show_in_admin_all_list'    => true,
			'show_in_admin_status_list' => true,
			'label_count'               => _n_noop( 'Failed <span class="count">(%s)</span>', 'Failed <span class="count">(%s)</span>', 'woocommerce' )
		) );
	}

	/**
	 * Add Product Support to Jetpack Omnisearch.
	 */
	public static function support_jetpack_omnisearch() {
		if ( class_exists( 'Jetpack_Omnisearch_Posts' ) ) {
			new Jetpack_Omnisearch_Posts( 'product' );
		}
	}

	/**
	 * Added product for Jetpack related posts.
	 *
	 * @param  array $post_types
	 * @return array
	 */
	public static function rest_api_allowed_post_types( $post_types ) {
		$post_types[] = 'product';

		return $post_types;
	}
}

WC_Post_types::init();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?php
/**
 * Installation related functions and actions
 *
 * @author   WooThemes
 * @category Admin
 * @package  WooCommerce/Classes
 * @version  2.4.1
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * WC_Install Class.
 */
class WC_Install {

	/** @var array DB updates that need to be run */
	private static $db_updates = array(
		'2.0.0' => 'updates/woocommerce-update-2.0.php',
		'2.0.9' => 'updates/woocommerce-update-2.0.9.php',
		'2.1.0' => 'updates/woocommerce-update-2.1.php',
		'2.2.0' => 'updates/woocommerce-update-2.2.php',
		'2.3.0' => 'updates/woocommerce-update-2.3.php',
		'2.4.0' => 'updates/woocommerce-update-2.4.php',
		'2.4.1' => 'updates/woocommerce-update-2.4.1.php',
		'2.5.0' => 'updates/woocommerce-update-2.5.php',
	);

	/**
	 * Hook in tabs.
	 */
	public static function init() {
		add_action( 'admin_init', array( __CLASS__, 'check_version' ), 5 );
		add_action( 'admin_init', array( __CLASS__, 'install_actions' ) );
		add_action( 'in_plugin_update_message-woocommerce/woocommerce.php', array( __CLASS__, 'in_plugin_update_message' ) );
		add_filter( 'plugin_action_links_' . WC_PLUGIN_BASENAME, array( __CLASS__, 'plugin_action_links' ) );
		add_filter( 'plugin_row_meta', array( __CLASS__, 'plugin_row_meta' ), 10, 2 );
		add_filter( 'wpmu_drop_tables', array( __CLASS__, 'wpmu_drop_tables' ) );
		add_filter( 'cron_schedules', array( __CLASS__, 'cron_schedules' ) );
	}

	/**
	 * Check WooCommerce version.
	 */
	public static function check_version() {
		if ( ! defined( 'IFRAME_REQUEST' ) && ( get_option( 'woocommerce_version' ) != WC()->version ) ) {
			self::install();
			do_action( 'woocommerce_updated' );
		}
	}

	/**
	 * Install actions when a update button is clicked.
	 */
	public static function install_actions() {
		if ( ! empty( $_GET['do_update_woocommerce'] ) ) {
			self::update();
			WC_Admin_Notices::remove_notice( 'update' );
			add_action( 'admin_notices', array( __CLASS__, 'updated_notice' ) );
		}
	}

	/**
	 * Show notice stating update was successful.
	 */
	public static function updated_notice() {
		?>
		<div id="message" class="updated woocommerce-message wc-connect">
			<p><?php _e( 'WooCommerce data update complete. Thank you for updating to the latest version!', 'woocommerce' )